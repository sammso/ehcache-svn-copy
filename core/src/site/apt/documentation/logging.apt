Logging And Debugging


* {Commons Logging}

    Ehcache uses the Apache Commons Logging library for logging.

    It acts as a thin bridge between
    logging statements in the code and logging infrastructure detected in
    the classpath. It will use in order of preference:

     * {log4j}
                   
     * {JDK1.4 logging}

     * and then its own <<<{SimpleLog}>>>

     This enables ehcache to use logging infrastructures compatible with Java versions
    from JDK1.2 to JDK5. It does create a dependency on Apache Commons
    Logging, however many projects, including Hibernate, share the same
    dependency.
                                      
    For normal production use, use the <<<WARN>>> level in log4J
    and the <<<WARNING>>> level for JDK1.4 logging.

* Example Log4J Configuration

    Unfortunately, if Commons Logging finds the log4j library in the classpath but not configuration
    it will use log4j which then reports a missing configuration error message.

    A simple example logging file for Log4J that will work for ehcache logging is shown below. Put it in
    a file called log4j.xml and put that in the root of your classpath.

---
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

    <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
        <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
            <param name="threshold" value="INFO"/>
            <layout class="org.apache.log4j.PatternLayout">
                <param name="ConversionPattern"
                       value="%d{ABSOLUTE} %5p %c{1}:%L - %m%n"/>
            </layout>
        </appender>

        <appender name="FILE" class="org.apache.log4j.DailyRollingFileAppender">
            <param name="file" value="${catalina.home}/logs/hotels.log"/>
            <param name="datePattern" value="'.'yyyy-MM-dd"/>
            <param name="append" value="true"/>
            <layout class="org.apache.log4j.PatternLayout">
                <param name="ConversionPattern"
                       value="%d{ABSOLUTE} %5p %c{1}:%L - %m%n"/>
            </layout>
        </appender>

        <logger name="net.sf.ehcache">
            <!-- Other levels are: ALL, DEBUG, INFO, WARN, ERROR -->
            <level value="WARN"/>
        </logger>

        <root>
            <level value="INFO"/>
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE"/>
        </root>
    </log4j:configuration>

---


* Logging Philosophy

    Ehcache seeks to trade off informing production support developers or important messages
    and cluttering the log.

    {ERROR} (JDK logging SEVERE_ messages should not occur in normal production and indicate that action should be taken.

    {WARNING} (JDK logging WARN) messages generally indicate a configuration change should be made or an unusual event
    has occurred.

    {DEBUG} (JDK logging FINE) messages are for development use. All DEBUG level statements are surrounded with a guard
    so that they are not executed unless the level is DEBUG.

    Setting the logging level to DEBUG (JDK level FINE) should provide more information on the source of any problems.
    Many logging systems enable a logging level change to be made without restarting the application.


* {Remote Network debugging and monitoring for Distributed Caches}

    ehcache-1.x-remote-debugger.jar} can be used to debug replicated cache operations.
    It is included in the distribution tarball for ehcache-1.2.3 and higher and also as the ehcache maven ehcache-debugger.

    It is invoked as follows:

--------------------------------------------

java -jar ehcache-1.x-remote-debugger.jar path_to_ehcache.xml cacheToMonitor

--------------------------------------------

   It can be incoked with one or two arguments:

   * the first argument, which is mandatory, is the ehcache configuration file e.g. app/config/ehcache.xml. This file should be configured to allow
   ehcache to joing the cluster. Using one of the existing ehcache.xml files from the other nodes normally is
   sufficient.

   * the second argument, which is optional, is the name of the cache e.g. distributedCache1

   If only the first argument is passed, it will print our a list of caches with replication configured
   from the configuration file, which are then available for monitoring.

   If the second argument is also provided, the debugger will monitor cache operations received for the given cache.

   This is done by registering a CacheEventListener which prints out each operation.


** Output

   When monitoring a cache it prints a list of caches with replication configured, prints notifications as they
   happen, and periodically prints the cache name, size and total events received. See sample output below which
   is produced when the RemoteDebuggerTest is run.

---
   Caches with replication configured which are available for monitoring are:
   sampleCache19 sampleCache20 sampleCache26 sampleCache42 sampleCache33
   sampleCache51 sampleCache40 sampleCache32 sampleCache18 sampleCache25
   sampleCache9 sampleCache15 sampleCache56 sampleCache31 sampleCache7
   sampleCache12 sampleCache17 sampleCache45 sampleCache41 sampleCache30
   sampleCache13 sampleCache46 sampleCache4 sampleCache36 sampleCache29
   sampleCache50 sampleCache37 sampleCache49 sampleCache48 sampleCache38
   sampleCache6 sampleCache2 sampleCache55 sampleCache16 sampleCache27
   sampleCache11 sampleCache3 sampleCache54 sampleCache28 sampleCache10
   sampleCache8 sampleCache47 sampleCache5 sampleCache53 sampleCache39
   sampleCache23 sampleCache34 sampleCache22 sampleCache44 sampleCache52
   sampleCache24 sampleCache35 sampleCache21 sampleCache43 sampleCache1
   Monitoring cache: sampleCache1
   Cache: sampleCache1 Notifications received: 0 Elements in cache: 0
   Received put notification for element [ key = this is an id, value=this is
   a value, version=1, hitCount=0, CreationTime = 1210656023456,
   LastAccessTime = 0 ]
   Received update notification for element [ key = this is an id, value=this
   is a value, version=1210656025351, hitCount=0, CreationTime =
   1210656024458, LastAccessTime = 0 ]
   Cache: sampleCache1 Notifications received: 2 Elements in cache: 1
   Received remove notification for element this is an id
   Received removeAll notification.

---


** Debugging the debugger

   If you see nothing happening, but cache operations should be going through, enable trace (LOG4J) or finest (JDK) level
   logging on <code>net.sf.ehcache.distribution</code> in the logging configuration being used by the debugger.
   A large volume of log messages will appear. The normal problem is that the CacheManager has not joined the cluster.
   Look for the list of cache peers.



