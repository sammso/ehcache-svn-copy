<project name="ehcache" default="clover">
    <!-- Load local environment overrides -->
    <property environment="env"/>
    <!-- Default properties -->
    <property file="build.properties"/>

    <!-- Set up project.class.path -->
    <path id="project.class.path">
        <fileset dir="${lib.runtime.dir}" includes="**/*.jar,**/*.zip"/>
        <fileset dir="${lib.compile.dir}" includes="**/*.jar,**/*.zip"/>
    </path>

    <target name="clean" description="Cleans the build directory">
        <delete dir="${build.dir}"/>
    </target>

    <!-- Use this for doing releases -->
    <target name="build" depends="clean, checkstyle, test, dist-tgz, buildnumber"
            description="Builds a clean distribution"/>

    <!-- This is primarily used to make it easy to keep a log of commits, as this file will change for each commit -->
    <target name="buildnumber">
        <buildnumber/>
    </target>

    <!-- Generate Clover code coverage report -->
    <target name="clover" depends="clean, with.clover, checkstyle, test, clover.html, clover-check-coverage"
            description="Runs tests and test coverage">
        <echo message="Use ant build to build a distribution"/>
    </target>

    <!-- compiles -->
    <target name="compile" depends="compile-src, rmic, compile-tests" description="Performs a compile"/>

    <!-- Runs checkstyle over the java source -->
    <target name="checkstyle-check">
        <uptodate property="checkstyle.up-to-date" value="true"
                  targetfile="${build.dir}/checkstyle">
            <srcfiles dir="${src.java.dir}" includes="**/*.java"/>
            <srcfiles dir="${test.java.dir}" includes="**/*.java"/>
        </uptodate>
    </target>

    <!-- Runs checkstyle over the java source -->
    <target name="checkstyle" depends="generate-checkstyle-config, checkstyle-check" unless="checkstyle.up-to-date">
        <taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath>
                <path location="${test.classes.dir}"/>
                <path location="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
        </taskdef>
        <checkstyle config="${checkstyle.config}" failOnViolation="true">
            <fileset dir="${src.java.dir}/" includes="**/*.java"/>
            <fileset dir="${test.java.dir}" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="xml" tofile="${build.log.dir}/checkstyle-report.xml"/>
        </checkstyle>
    </target>

    <target name="generate-checkstyle-config">
        <mkdir dir="${build.log.dir}"/>
        <!-- Make hardcoded version available to IDE plugin -->
        <copy file="${checkstyle.config}" todir="${build.log.dir}">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>


    <!-- Compiles the source classes -->
    <target name="compile-src" description="compile src files">
        <mkdir dir="${build.classes.dir}"/>
        <javac destdir="${build.classes.dir}"
               target="1.3"
               debug="${compiler.debug}"
               deprecation="${compiler.deprecation}"
               source="1.3">
            <src location="${src.java.dir}"/>
            <classpath refid="project.class.path"/>
        </javac>
        <copy file="${src.config.dir}/ehcache-failsafe.xml" todir="${build.classes.dir}"/>
    </target>


    <target name="rmic">
        <rmic base="${build.classes.dir}" includes="**/RMICachePeer.class" excludes="**/*CLOVER*"/>
    </target>

    <target name="compile-tests" depends="compile-src">
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}"
               target="1.3"
               debug="${compiler.debug}"
               deprecation="${compiler.deprecation}"
               source="1.3">
            <src location="${test.java.dir}"/>
            <classpath>
                <path path="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
        </javac>
        <copy file="${test.config.dir}/ehcache.xml" todir="${test.classes.dir}"/>
        <copy file="${test.config.dir}/ehcache-2.xml" todir="${test.classes.dir}"/>
    </target>


    <target name="test" depends="compile, prepare-web-tests, start-orion, run-tests-no-check, stop-orion"
            if="tests.failed" description="Runs Tests">
        <fail message="One or more tests failed. See the log file for details."/>
    </target>


    <!-- Make sure you have copied junit-3.8.1.jar to $ANT_HOME/lib -->
    <target name="run-tests-no-check">
        <mkdir dir="${test.results.dir}"/>

        <condition property="test.pattern" value="*">
            <not>
                <isset property="test.case"/>
            </not>
        </condition>
        <condition property="test.pattern" value="${test.case}">
            <isset property="test.case"/>
        </condition>

        <junit printSummary="true" failureproperty="tests.failed" fork="true" dir="${basedir}">
            <sysproperty key="java.util.logging.config.file" file="${test.logging.properties.file}"/>
            <classpath>
                <path location="${test.classes.dir}"/>
                <path location="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="**/${test.directory.pattern}/**/${test.pattern}Test.class"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>
        <antcall target="junitreport"/>
    </target>

    <!-- Transform test results into a junit report. -->
    <target name="junitreport">
        <echo message="Compiling JUnit Report"/>
        <mkdir dir="${test.report.dir}"/>
        <junitreport todir="${test.report.dir}" tofile="${test.log.file}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.report.dir}"/>
        </junitreport>
    </target>

    <!-- Builds a jar file containing for the application  -->
    <target name="dist-jar" depends="compile" description="Builds the application jar">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${name}-${version}.jar">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
        </jar>
    </target>

    <!-- Builds a test jar file containing a test application for manual distributed testing. -->
    <target name="test-jar" depends="compile" description="Builds the application jar">
        <mkdir dir="${build.dir}/test"/>
        <jar destfile="${build.dir}/test/${name}-test.jar">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${test.classes.dir}"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
            <fileset dir="${test.config.dir}/distribution" includes="ehcache-distributed1.xml"/>
            <zipfileset src="${lib.runtime.dir}/commons-logging-1.0.4.jar"/>
            <zipfileset src="${lib.runtime.dir}/commons-collections-2.1.1.jar"/>
            <zipfileset src="${lib.compile.dir}/clover-1.3.10.jar"/>
            <manifest>
                <attribute name="Main-Class" value="net.sf.ehcache.distribution.Main"/>
            </manifest>
        </jar>
    </target>

    <!-- Builds a release tar-ball -->
    <target name="dist-tgz" depends="dist-jar, dist-javadoc, dist-src">
        <tar destfile="${dist.dir}/${name}-${version}.tgz"
             compression="gzip">
            <tarfileset dir="${dist.dir}" prefix="${name}-${version}">
                <include name="${name}-${version}.jar"/>
                <include name="${name}-${version}-${javadoc.zip}"/>
                <include name="${name}-${version}-src.zip"/>
            </tarfileset>
            <tarfileset dir="${basedir}" prefix="${name}-${version}">
                <include name="RELEASE_NOTES.txt"/>
                <include name="LICENSE.txt"/>
                <include name="CHANGELOG.txt"/>
                <include name="lib/**"/>
            </tarfileset>
            <tarfileset dir="${src.config.dir}" prefix="${name}-${version}">
                <include name="ehcache.*"/>
            </tarfileset>
        </tar>
    </target>

    <!-- Builds a maven upload bundle -->
    <target name="maven-bundle" depends="dist-tgz">
        <copy file="${dist.dir}/${name}-${version}-${javadoc.zip}" tofile="${dist.dir}/${name}-${version}-javadoc.jar"/>
        <copy file="${dist.dir}/${name}-${version}-src.zip" tofile="${dist.dir}/${name}-${version}-sources.jar"/>
        <copy file="${basedir}/pom.xml" tofile="${dist.dir}/${name}-${version}.pom"/>
        <copy file="${basedir}/LICENSE.txt" tofile="${dist.dir}/${name}-${version}.license"/>
        <jar destfile="${dist.dir}/${name}-${version}-bundle.jar">
            <fileset dir="${dist.dir}/">
                <include name="${name}-${version}.pom"/>
                <include name="${name}-${version}.license"/>
                <include name="${name}-${version}.jar"/>
                <include name="${name}-${version}-javadoc.jar"/>
                <include name="${name}-${version}-sources.jar"/>
            </fileset>
        </jar>
    </target>

    <!-- Create zip file for javadocs -->
    <target name="dist-javadoc" depends="javadoc" description="Creates a zip file for javadocs">
        <zip destfile="${dist.dir}/${name}-${version}-${javadoc.zip}">
            <zipfileset dir="${build.javadoc.dir}" prefix="docs/"/>
        </zip>
    </target>

    <!-- Create a zip file for src -->
    <target name="dist-src" description="Creates a zip file for src">
        <zip destfile="${dist.dir}/${name}-${version}-src.zip">
            <zipfileset dir="${src.java.dir}" prefix="src/"/>
        </zip>
    </target>

    <property name="classpath" refid="project.class.path"/>

    <!-- Produce the javadocs. Note the maven version of javadoc includes yDoc. Too big to include in download though  -->
    <target
            name="javadoc"
            description="Creates the javadocs">

        <mkdir dir="${build.javadoc.dir}"/>
        <javadoc
                sourcepath="${src.java.dir}"
                destdir="${build.javadoc.dir}"
                packagenames="net.sf.*"
                Package="true"
                overview="${src.java.dir}/net/sf/ehcache/overview.html"
                author="true"
                version="true"
                use="true"
                windowtitle="${name}">
            <tag name="noinspection" description="IntelliJ Inspection Ignore tag" enabled="false"/>
            <classpath refid="project.class.path"/>
            <header><![CDATA[<a href="/" target="_top">${name}</a>]]></header>
        </javadoc>
    </target>

    <!-- Copy the clover jar to your ant lib directory to run these -->
    <taskdef resource="com/cenqua/ant/antlib.xml" classpath="tools/cenquatasks.jar"/>
    <extendclasspath path="tools/clover-1.3.10.jar"/>

    <taskdef resource="clovertasks">
        <classpath refid="project.class.path"/>
    </taskdef>
    <typedef resource="clovertypes">
        <classpath refid="project.class.path"/>
    </typedef>

    <target name="with.clover">
        <mkdir dir="${build.log.dir}"/>
        <clover-setup initString="${build.log.dir}/mycoverage.db"
                      flushpolicy="directed">
            <fileset dir="${src.java.dir}/" includes="**/*.java"/>
            <!-- not working. Support request logged -->
            <statementContext name="log" regexp=".*LOG.*"/>
        </clover-setup>
    </target>

    <target name="clover.html" depends="with.clover">
        <clover-report>
            <current outfile="${build.log.dir}/clover">
                <format type="html" filter="catch"/>
            </current>
        </clover-report>
        <clover-log level="summary" filter="catch"/>
    </target>

    <target name="clover-check-coverage" depends="with.clover" if="singleRMIRegistryPerVM">
        <echo message="Java: ${ant.java.version}"/>
        <clover-check target="${clover.test.coverage.percentage}"
                      filter="catch" haltOnFailure="true"/>
    </target>

    <!-- JDKs below 1.5 do not support multiple RMI Registries per VM and we must therefore exclude some tests -->
    <condition property="singleRMIRegistryPerVM" value="true">
        <not>
            <or>
                <equals arg1="1.3" arg2="${ant.java.version}"/>
                <equals arg1="1.4" arg2="${ant.java.version}"/>
            </or>
        </not>
    </condition>

    <!-- Start up the test instance of the Orion server -->
    <target name="start-orion" description="Starts the Orion server">
        <echo>Starting Orion on ${os.name}</echo>
        <exec dir="${build.orion.dir}" spawn="true" os="Mac OS X, Linux" executable="sh">
            <arg line="orion_sh_and.bat"/>
        </exec>
        <waitfor maxwait="10000" checkevery="1500">
            <http url="http://localhost:8080"/>
        </waitfor>
        <echo message="...Started"/>
    </target>

    <!-- Stop the test instance of the Orion server -->
    <target name="stop-orion" description="Stops the Orion server">
        <echo>Stopping Orion</echo>
        <waitfor maxwait="5000" checkevery="500">
            <http url="http://localhost:8080/Exit.jsp"/>
        </waitfor>
        <echo message="...Stopped"/>
    </target>

    <target name="prepare-web-tests" depends="compile, dist-jar, deploy-default-web-app" if="${run.web.tests}"
            description="Prepare to run  the web tests ">
    </target>

    <target name="deploy-default-web-app">
        <unzip dest="${build.dir}" src="${lib.compile.dir}/web/orion.zip"/>
        <copy file="${dist.dir}/${name}-${version}.jar" todir="${build.orion.lib.dir}"/>
        <copy file="${lib.runtime.dir}/commons-logging-1.0.4.jar" todir="${build.orion.lib.dir}"/>
        <!--<copy file="${lib.compile.dir}/ehcache-1.2.jar" todir="${build.orion.lib.dir}"/>-->
        <copy file="${lib.runtime.dir}/commons-collections-2.1.1.jar" todir="${build.orion.lib.dir}"/>
        <copy file="${lib.compile.dir}/clover-1.3.10.jar" todir="${build.orion.lib.dir}"/>
        <copy file="${test.config.dir}/ehcache.xml" todir="${build.orion.lib.dir}"/>
        <copy file="logging.properties" todir="${build.orion.dir}"/>
        <jar destfile="${build.orion.lib.dir}/${name}-tests-${version}.jar">
            <fileset dir="${test.classes.dir}"/>
        </jar>
        <copy todir="${build.orion.dir}">
            <fileset dir="${test.config.dir}" includes="default-web-app/**"/>
        </copy>

        <condition property="unix">
            <and>
                <os family="unix"/>
                <not>
                    <os name="Mac OS X"/>
                </not>
            </and>
        </condition>
        <antcall target="copy-tools-lib"/>
    </target>

    <target name="copy-tools-lib" if="unix">
        <copy todir="${build.orion.dir}" file="${java.home}/../lib/tools.jar"/>
    </target>


</project>
