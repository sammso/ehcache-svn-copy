<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="ehcache.xsd">

    <!--
    Configuring JMS replication.
    ===========================

    <cacheManagerPeerProviderFactory
            class="net.sf.ehcache.distribution.jms.JMSCacheManagerPeerProviderFactory"
            properties="..."
            propertySeparator=","
            />

    The JMS PeerProviderFactory uses JNDI to maintain message queue independence. Refer to the manual for full configuration
    examples using ActiveMQ and Open Message Queue.

    Valid properties are:
    * initialContextFactoryName (mandatory) - the name of the factory used to create the message queue initial context.
    * providerURL (mandatory) - the JNDI configuration information for the service provider to use.
    * topicConnectionFactoryBindingName (mandatory) - the JNDI binding name for the TopicConnectionFactory
    * getQueueBindingName (mandatory only if using jmsCacheLoader) - the JNDI binding name for the queue name used to do gets
    * securityPrincipalName - the JNDI java.naming.security.principal
    * securityCredentials - the JNDI java.naming.security.credentials
    * urlPkgPrefixes - the JNDI java.naming.factory.url.pkgs
    * userName - the user name to use when creating the TopicConnection to the Message Queue
    * password - the password to use when creating the TopicConnection to the Message Queue
    * acknowledgementMode - the JMS Acknowledgement mode for both publisher and subscriber. The available choices are
                            AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE and SESSION_TRANSACTED. The default is AUTO_ACKNOWLEDGE.

    This peer provider can also respond to JMSCacheLoader requests. Add the following properties to do so:
    * replicationTopicBindingName (mandatory) - the JNDI binding name for the topic name
    * getQueueConnectionFactoryBindingName (mandatory only if using jmsCacheLoader) -
            the JNDI binding name for the QueueConnectionFactory


    JMS Cache Loader
    ================

    The JMSCacheLoader is a CacheLoader which loads objects into the cache by sending requests to a JMS Queue.

    The loader places an empty Message on the getQueue with the following String properties:

    * key - the cache key the loader is requesting.
    * action - this must be 'get'
    * loaderArgument - the defaultLoaderArgument, or the loaderArgument if specified on the
     load request. To work with the JMSCacheManagerPeerProvider this should be the name of the cache to load from.
     For custom responders, it can be anything which has meaning to the responder.

    A queue responder will respond to the request. You can either create your own, in any programming language supported
    by your message queue, or use the one built-into the JMSCacheManagerPeerProviderFactory, which attempts to load
    the queue from its cache. See the documentation for details on how to write a responder.

    The responder creates a message with the following properties:

    * StringProperty responder - the name of the responder. This is optional but is useful for debugging.
    * JMSCorrelationId - this must be the id of the requester message. The loader uses this to ensure the right response
    comes back to the correct request.
    * StringProperty MimeType - the MIME Type of the body of the message. This is not optional.

    The value from the responder is contained in the body of the message. The following messages and their treatments
    in ehcache are as follows:

    ObjectMessage - becomes the value part of an Ehcache Element
    TextMessage - stored as a String in the value part of an Ehcache Element if the MimeType StringProperty is null. If
     non-null it is converted to bytes using the platform's default character set and stored, along with the Mime Type
     as a net.sf.ehcache.MimeTypeByteArray in the value part of an Ehcache Element.

    BytesMessage - stored as a byte[] in the value part of an Ehcache Element if the MimeType StringProperty is null. If
     non-null it stored, along with the Mime Type as a net.sf.ehcache.MimeTypeByteArray in the value part of an Ehcache Element.


    The JMSCacheLoader uses JNDI to maintain message queue independence. Refer to the manual for full configuration
    examples using ActiveMQ and Open Message Queue.

    It is configured as per the following example:

    <cacheLoaderFactory class="net.sf.ehcache.distribution.jms.JMSCacheLoaderFactory"
                        properties="initialContextFactoryName=com.sun.jndi.fscontext.RefFSContextFactory,
            providerURL=file:///tmp,
            topicConnectionFactoryBindingName=MyConnectionFactory,
            replicationTopicBindingName=ehcache,
            getQueueConnectionFactoryBindingName=queueConnectionFactory,
            getQueueBindingName=ehcacheGetQueue,
            timeoutMillis=20000
            defaultLoaderArgument="/>

    Valid properties are:
    * initialContextFactoryName (mandatory) - the name of the factory used to create the message queue initial context.
    * providerURL (mandatory) - the JNDI configuration information for the service provider to use.
    * getQueueConnectionFactoryBindingName (mandatory) - the JNDI binding name for the QueueConnectionFactory
    * getQueueBindingName (mandatory) - the JNDI binding name for the queue name used to do make requests.
    * defaultLoaderArgument - (optional) - an application specific argument. If not supplied as a cache.load() parameter
    this default value will be used. The argument is passed in the JMS request as a StringProperty called loaderArgument.
    * timeoutMillis - time in milliseconds to wait for a reply.
    * securityPrincipalName - the JNDI java.naming.security.principal
    * securityCredentials - the JNDI java.naming.security.credentials
    * urlPkgPrefixes - the JNDI java.naming.factory.url.pkgs
    * userName - the user name to use when creating the TopicConnection to the Message Queue
    * password - the password to use when creating the TopicConnection to the Message Queue
    * acknowledgementMode - the JMS Acknowledgement mode for both publisher and subscriber. The available choices are
                            AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE and SESSION_TRANSACTED. The default is AUTO_ACKNOWLEDGE.
    -->
    <cacheManagerPeerProviderFactory
            class="net.sf.ehcache.distribution.jms.JMSCacheManagerPeerProviderFactory"
            properties="initialContextFactoryName=net.sf.ehcache.distribution.jms.TestActiveMQInitialContextFactory,
                providerURL=tcp://localhost:61616,
                topicConnectionFactoryBindingName=topicConnectionFactory,
                getQueueConnectionFactoryBindingName=queueConnectionFactory,
                replicationTopicBindingName=ehcache,
                getQueueBindingName=ehcacheGetQueue"
            propertySeparator=","
            />

    <defaultCache
            maxElementsInMemory="10000"
            eternal="false"
            timeToIdleSeconds="120"
            timeToLiveSeconds="120"
            overflowToDisk="false"
            memoryStoreEvictionPolicy="FIFO">
    </defaultCache>


    <cache name="sampleCacheAsync"
           maxElementsInMemory="1000"
           eternal="false"
           timeToIdleSeconds="1000"
           timeToLiveSeconds="1000"
           overflowToDisk="false">
        <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                                   properties="replicateAsynchronously=true, 
                                                replicatePuts=true,
                                                replicateUpdates=true,
                                                replicateUpdatesViaCopy=true,
                                                replicateRemovals=true,
                                                asynchronousReplicationIntervalMillis=1000"
                                    propertySeparator=","/>
    </cache>





    <cache name="sampleCacheSync"
           maxElementsInMemory="10000"
           eternal="false"
           timeToIdleSeconds="120"
           timeToLiveSeconds="120"
           overflowToDisk="false"
           memoryStoreEvictionPolicy="FIFO">
        <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                                   properties="replicateAsynchronously=false,
                                                 replicatePuts=true,
                                                 replicateUpdates=true,
                                                 replicateUpdatesViaCopy=true,
                                                 replicateRemovals=true"
                                   propertySeparator=","/>
    </cache>

    <cache name="sampleCacheNorep"
           maxElementsInMemory="1000"
           eternal="false"
           timeToIdleSeconds="1000"
           timeToLiveSeconds="1000"
           overflowToDisk="false">
        <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                                   properties="replicateAsynchronously=false, replicatePuts=false,
                                     replicateUpdates=false, replicateUpdatesViaCopy=false,
                                     replicateRemovals=false, loaderArgument=sampleCacheNorep"
                                    propertySeparator=","/>
        <cacheLoaderFactory class="net.sf.ehcache.distribution.jms.JMSCacheLoaderFactory"
            properties="initialContextFactoryName=net.sf.ehcache.distribution.jms.TestActiveMQInitialContextFactory,
                providerURL=tcp://localhost:61616,
                topicConnectionFactoryBindingName=topicConnectionFactory,
                getQueueConnectionFactoryBindingName=queueConnectionFactory,
                replicationTopicBindingName=ehcache,
                getQueueBindingName=ehcacheGetQueue,
                timeoutMillis=10000,
                defaultLoaderArgument=sampleCacheNorep"/>
    </cache>


</ehcache>
