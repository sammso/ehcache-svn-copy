 ---
 Explicit Locking API
 ---

{Explicit Locking API}

    {{{#Locking_Modes}Locking Modes}} | {{{#How_to_Scale}How to Scale}} | {{{#Download}Download}}

    This package contains an implementation of an Ehcache which provides for explicit locking,
    using READ and WRITE locks.

    It is possible to get more control over Ehcache's locking behaviour.

*   Locking Modes

**  Standalone Ehcache

    In standalone ehcache core, there is no locking. The last write wins. This is akin to
    the READ_UNCOMMITTED isolation level.

**  Standard Ehcache clustered with Terracotta

    In this case the cache is always coherent, akin to READ_COMMITTED isolation level. This
    package simply gives you more control over when locks are acquired and released. In regular
    Ehcache if you get an object to read or write it can be changed underneath you while you are
    performing your application level operations on the object.
    <p/>

**  Explicit Locking Ehcache clustered with Terracotta

    With this module you can first get the lock
    for the key, then perform your app level operations preventing anyone else from writing to the
    object. When the app level operations are completed you put the Element back in the cache and
    release the lock so that others can now access it.


*  How it works

    A READ lock does not prevent other READers from also acquiring a READ lock and reading. A
    READ lock cannot be obtained if there is an oustanding WRITE lock - it will queue.

    A WRITE lock cannot be obtained while there are outstanding READ locks - it will queue.

    In each case to avoid locking problems, the lock should be released after use. The lock
    release should be in a <pre>finally</pre> block.

    If before each read, you acquire a READ lock and then before each write you acquire a WRITE
    lock, then an isolation level akin to READ_COMMITTED is achieved.


*   {How to Scale}

    Configuring each Hibernate instance with a standalone ehcache will dramatically improve
    performance. However most production applications use multiple application instances
    for redundancy and for scalability. Ideally applications are horizontally scalable, where
    adding more application instances linearly improves throughput.

    With an application deployed on multiple nodes, using standalone Ehcache means that each instance holds its own
    data. On a cache miss on any node, Hibernate will hit the database. As each new node gets added
    database workload goes up. The solution is to turn on {{{/documentation/distributed_caching.html}distributed caching}}.

    Ehcache comes with replicated caching via RMI, JGroups or JMS. These replicate without locking and are suitable
     for databas offload. Generally <<<session.refresh()>>> should be used to check the cache against the database
     before performing a write that must be correct. Secondly, as each node stores all data, the cache size is limited
     to a comfortable storage size. Memory size is usually limited by garbage collection. Disk can also be used, but
     the graphs are serialized which adds overhead and results in duplication in the deserialized object graphs.


    Ehcache is also the caching API to the Terracotta Server Array. Reads and writes use cluster wide locks, so
    when using read write Hibernate caches, the cache data on all nodes will be correct, and it is not necessary to call
      <<<session.refresh()>>>.

    Ehcache EX, using a single or redundant Terracotta Server Array server can comfortably store approximately 20GB per stripe.
    The <<<maxElementsInMemory>>> cache setting is used to apportion a percentage of that in process for added performance, it does
    not limit the size. Using striping which comes with Ehcache FX, terabyte sized caches are possible. It is possible
     to cache the entire database with a resulting large database offload.

    These scaling decisions can be deferred. The plugin is the same regardless of how it is configured. The optimal deployment
     can thus be determined during performance testing or based on production experience. Finally a new application
     can scale as it's use grows without expensive re-architecting.


*   {Download}

    The Explicit Locking API is in the ehcache-explicitlocking module. Download {{{http://sourceforge.net/projects/ehcache/files/ehcache-explicitlocking}here}}.

    This feature currently only works with Terracotta Server Array. It needs ehcache-core and ehcache-terracotta. which
    can be downloaded {{{http://sourceforge.net/projects/ehcache/files/ehcache}here}}.

    The open source Terracotta Server Array kit (which includes ehcache-core and ehcache-terracotta) can be downloaded
    {{{http://www.terracotta.org/dl/oss-sign-up}here}}. terracotta_community_login

