<project name="ehcache" default="build" xmlns:artifact="urn:maven-artifact-ant">


    <!-- The following functions are now in Maven:

    1. Compiling
    2. Running tests
    3. checkstyle
    4. Building the distribution

    What's left:
    1. Single Page Guide and Book. Run "mvn compile site" first.
    2. Deploying to, starting and stopping the app servers. Wire the app server of choice into the mvn pre-integration
    -test and post-integration-test steps
    -->

    <!-- Load Maven antlib and make pom.xml available as maven.project -->
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
            <pathelement location="tools/maven-ant-tasks-2.0.7.jar"/>
        </classpath>
    </typedef>

    <artifact:pom file="pom.xml" id="maven.project"/>


    <!-- Load local environment overrides -->
    <property environment="env"/>
    <!-- Default properties -->
    <property file="build.properties"/>

    <property name="name" value="${maven.project.artifactId}"/>
    <property name="version" value="${maven.project.version}"/>

    <artifact:dependencies filesetId="dependency.fileset" pathId="dependency.classpath"
                           verbose="false">
        <pom refid="maven.project"/>
    </artifact:dependencies>

    <artifact:dependencies filesetId="compile.dependency.fileset"
                           pathId="compile.dependency.classpath" useScope="compile">
        <pom refid="maven.project"/>
    </artifact:dependencies>

    <!-- Set up project.class.path -->
    <path id="project.class.path">
        <path refid="dependency.classpath"/>
    </path>

    <target name="prepare-and-start-orion"
            depends="prepare-web-tests, start-orion"/>


    <!-- Builds a jar file containing for the application  -->
    <target name="dist-jar" description="Builds the application jar">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${name}-${version}.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Version" value="${version}"/>
            </manifest>
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
        </jar>
    </target>

    <artifact:dependencies filesetId="runtime-dependencies.fileset">
        <dependency groupId="net.sf.jsr107cache" artifactId="jsr107cache" version="1.0"/>
    </artifact:dependencies>

    <property name="classpath" refid="project.class.path"/>

    <!-- Start up the test instance of the Orion server -->
    <target name="start-orion" description="Starts the Orion server">
        <echo>Starting Orion on ${os.name}</echo>
        <exec dir="${build.orion.dir}" spawn="true" os="Mac OS X, Linux, AIX, Solaris"
              executable="sh">
            <arg line="orion_sh_and.bat"/>
        </exec>
        <exec dir="${build.orion.dir}" spawn="true" os="Windows XP, Windows 2000"
              executable="cmd">
            <arg value="/c"/>
            <arg value="orion_sh_and.bat"/>
        </exec>
        <waitfor maxwait="10000" checkevery="1500">
            <http url="http://localhost:9080"/>
        </waitfor>
        <echo message="...Started"/>
    </target>

    <macrodef name="stop-web-container-macro">
        <attribute name="port-prefix" default="NOT SET"/>
        <sequential>
            <echo message="...Stopped Web Server"/>
            <waitfor maxwait="5000" checkevery="500">
                <http url="http://localhost:@{port-prefix}80/Exit.jsp"/>
            </waitfor>
        </sequential>
    </macrodef>

    <!--  todo put back          depends="compile, dist-jar, deploy-default-web-app-orion, deploy-default-web-app-tomcat, deploy-default-web-app-glassfish"
    -->
    <target name="prepare-web-tests"
            depends="dist-jar, deploy-default-web-app-orion, deploy-default-web-app-tomcat"
            if="${run.web.tests}"
            description="Prepare to run  the web tests ">
    </target>


    <target name="deploy-default-web-app-orion">
        <unzip dest="${build.dir}" src="${lib.compile.dir}/web/orion.zip"/>
        <copy file="${dist.dir}/${name}-${version}.jar" todir="${build.orion.lib.dir}"/>
        <copy todir="${build.orion.lib.dir}" flatten="true">
            <fileset refid="runtime-dependencies.fileset"/>
        </copy>
        <copy file="${test.config.dir}/ehcache.xml" todir="${build.orion.lib.dir}"/>
        <jar destfile="${build.orion.lib.dir}/${name}-tests-${version}.jar">
            <fileset dir="${test.classes.dir}"/>
        </jar>
        <copy todir="${build.orion.dir}">
            <fileset dir="${test.config.dir}" includes="default-web-app/**"
                     excludes="**/WEB-INF/**"/>
        </copy>

        <copy todir="${build.orion.dir}/default-web-app/WEB-INF">
            <fileset dir="${test.config.dir}/default-web-app/WEB-INF/2_3"/>
        </copy>

        <condition property="not_mac">
            <not>
                <os name="Mac OS X"/>
            </not>
        </condition>
        <antcall target="copy-tools-lib"/>
    </target>

    <macrodef name="deploy-default-web-app-tomcat_macro">
        <attribute name="port-prefix" default="NOT SET"/>
        <attribute name="build.tomcat.dir" default="${build.dir}/tomcat@{port-prefix}"/>
        <attribute name="build.tomcat.defaultwebapp.dir" default="@{build.tomcat.dir}/webapps/ROOT"/>
        <sequential>


            <copy todir="@{build.tomcat.dir}" overwrite="true">
                <fileset dir="${env.TOMCAT_HOME}"/>
            </copy>
            <mkdir dir="@{build.tomcat.defaultwebapp.dir}"/>
            <mkdir dir="@{build.tomcat.defaultwebapp.dir}/WEB-INF/classes"/>
            <mkdir dir="@{build.tomcat.defaultwebapp.dir}/WEB-INF/lib"/>
            <!--ehcache needs to go into common to overcome classloading issues between tomcat and RMI on distributed apps-->
            <!--tomcat 6-->
            <copy todir="@{build.tomcat.dir}/lib" flatten="true" overwrite="true">
                <fileset file="${dist.dir}/${name}-${version}.jar"/>
                <fileset refid="runtime-dependencies.fileset"/>
            </copy>

            <!--tomcat 5.5-->
            <copy todir="@{build.tomcat.dir}/common/lib" flatten="true" overwrite="true">
                <fileset file="${dist.dir}/${name}-${version}.jar"/>
                <fileset refid="runtime-dependencies.fileset"/>
            </copy>

            <copy file="${test.config.dir}/ehcache.xml" todir="@{build.tomcat.defaultwebapp.dir}/WEB-INF/classes"
                  overwrite="true"/>
            <jar destfile="@{build.tomcat.defaultwebapp.dir}/WEB-INF/lib/${name}-tests-${version}.jar">
                <fileset dir="${test.classes.dir}"/>
            </jar>
            <copy todir="@{build.tomcat.defaultwebapp.dir}" overwrite="true">
                <fileset dir="${test.config.dir}/default-web-app">
                    <exclude name="**/WEB-INF/**"/>
                </fileset>
            </copy>
            <copy todir="@{build.tomcat.defaultwebapp.dir}/WEB-INF" overwrite="true">
                <fileset dir="${test.config.dir}/default-web-app/WEB-INF/2_4/"/>
            </copy>

            <!--Fix up ports-->
            <replace file="@{build.tomcat.dir}/conf/server.xml" token="8080" value="@{port-prefix}80"/>
            <replace file="@{build.tomcat.dir}/conf/server.xml" token="8005" value="@{port-prefix}81"/>
            <replace file="@{build.tomcat.dir}/conf/server.xml" token="8443" value="@{port-prefix}82"/>
            <replace file="@{build.tomcat.dir}/conf/server.xml" token="8009" value="@{port-prefix}83"/>
        </sequential>
    </macrodef>

    <target name="deploy-default-web-app-tomcat">
        <deploy-default-web-app-tomcat_macro port-prefix="90"/>
    </target>

    <!-- This target can be used to deploy to Glassfish to then manually run the web test suite.
         You need to define a GLASSFISH_HOME environment variable for this.
         See the Glassfish page in documentation for details. -->
    <target name="deploy-default-web-app-glassfish" description="deploy default web app glassfish">
        <antcall target="stop-glassfish"/>
        <antcall target="start-glassfish"/>
        <antcall target="copy-default-web-app-glassfish"/>
        <sleep seconds="20"/>
        <antcall target="stop-glassfish"/>
        <antcall target="copy-glassfish-configuration"/>
    </target>

    <target name="copy-default-web-app-glassfish" description="deploy default web app glassfish" depends="dist-jar">
        <!--<untar dest="${build.dir}" src="${lib.compile.dir}/web/apache-tomcat-5.5.17.tgz" compression="gzip"/>-->
        <mkdir dir="${build.glassfish.dir}"/>
        <mkdir dir="${build.glassfish.webapp.dir}"/>
        <mkdir dir="${build.glassfish.webapp.dir}/WEB-INF/classes"/>
        <mkdir dir="${build.glassfish.webapp.dir}/WEB-INF/lib"/>
        <copy file="${dist.dir}/${name}-${version}.jar"
              todir="${build.glassfish.webapp.dir}/WEB-INF/lib"/>
        <copy todir="${build.glassfish.webapp.dir}/WEB-INF/lib" flatten="true">
            <fileset refid="runtime-dependencies.fileset"/>
        </copy>
        <copy file="${test.config.dir}/ehcache.xml"
              todir="${build.glassfish.webapp.dir}/WEb-INF/classes"/>
        <jar destfile="${build.glassfish.webapp.dir}/WEB-INF/lib/${name}-tests-${version}.jar">
            <fileset dir="${test.classes.dir}"/>
        </jar>
        <copy todir="${build.glassfish.webapp.dir}">
            <fileset dir="${test.config.dir}/default-web-app">
                <exclude name="**/WEB-INF/**"/>
            </fileset>
        </copy>
        <copy todir="${build.glassfish.webapp.dir}/WEB-INF">
            <fileset dir="${test.config.dir}/default-web-app/WEB-INF/2_5/"/>
        </copy>
        <jar destfile="${build.dir}/glassfish.war">
            <fileset dir="${build.glassfish.dir}"/>
        </jar>
        <copy todir="${env.GLASSFISH_HOME}/${build.glassfish.webapp.deploy.dir}" file="${build.dir}/glassfish.war"/>
    </target>

    <target name="start-glassfish" description="start glassfish">
        <echo message="Starting Glassfish on ${os.name} on port ${port-prefix}80"/>
        <exec dir="${env.GLASSFISH_HOME}/bin" spawn="true" os="Mac OS X, Linux, AIX, Solaris"
              executable="asadmin">
            <arg line="start-domain domain1"/>
        </exec>
        <waitfor maxwait="10000" checkevery="1500">
            <http url="http://localhost:@{port-prefix}80"/>
        </waitfor>
        <echo message="...Started"/>
    </target>

    <target name="stop-glassfish" description="start glassfish">
        <exec dir="${env.GLASSFISH_HOME}/bin" spawn="true" os="Mac OS X, Linux, AIX, Solaris"
              executable="asadmin">
            <arg line="stop-domain domain1"/>
        </exec>
        <waitfor maxwait="10000" checkevery="1500">
            <not>
                <http url="http://localhost:@{port-prefix}80"/>
            </not>
        </waitfor>
    </target>

    <!-- Do this after the autodeploy. Shutdown Glassfish and restart afterwards. -->
    <target name="copy-glassfish-configuration" description="configure glassfish domain.xml">
        <copy overwrite="true" todir="${env.GLASSFISH_HOME}/domains/domain1/config"
              file="${test.config.dir}/default-web-app/WEB-INF/2_5/domain.xml"/>
    </target>


    <macrodef name="start-tomcat-macro">
        <attribute name="port-prefix" default="NOT SET"/>
        <attribute name="build.tomcat.dir" default="${build.dir}/tomcat@{port-prefix}"/>
        <sequential>
            <echo>Starting Tomcat on ${os.name} on port @{port-prefix}80</echo>
            <exec dir="@{build.tomcat.dir}/bin" spawn="true" os="Mac OS X, Linux, AIX, Solaris"
                  executable="java">
                <arg line="-jar bootstrap.jar"/>
            </exec>
            <exec dir="@{build.tomcat.dir}/bin" spawn="true" os="Windows XP, Windows 2000"
                  executable="cmd">
                <arg value="/c"/>
                <arg value="tomcat_sh_and.bat"/>
            </exec>
            <waitfor maxwait="10000" checkevery="1500">
                <http url="http://localhost:@{port-prefix}80"/>
            </waitfor>
            <echo message="...Started"/>
        </sequential>
    </macrodef>

    <target name="deploy-and-start-multiple-tomcats" depends="dist-jar"
            description="Allows manual testing of tomcat apps">
        <deploy-default-web-app-tomcat_macro port-prefix="80"/>
        <start-tomcat-macro port-prefix="80"/>

        <deploy-default-web-app-tomcat_macro port-prefix="81"/>
        <start-tomcat-macro port-prefix="81"/>
    </target>


    <target name="stop-multiple-tomcats" description="Stops multiple manual testing tomcats">
        <stop-web-container-macro port-prefix="80"/>
        <stop-web-container-macro port-prefix="81"/>
    </target>

    <!-- Start up the test instance of the Tomcat server -->
    <target name="start-tomcat" description="Starts the Orion server">
        <start-tomcat-macro port-prefix="${port-prefix}"/>
    </target>


    <target name="stop-tomcat" description="Stops tomcat">
        <stop-web-container-macro port-prefix="${port-prefix}"/>
    </target>

    <target name="stop-orion" description="Stops orion">
        <stop-web-container-macro port-prefix="${port-prefix}"/>
    </target>

    <target name="copy-tools-lib" if="not_mac">
        <copy todir="${build.orion.dir}" file="${java.home}/../lib/tools.jar"/>
    </target>

    <!-- Requres LaTeX and netpbm. Use this from maven because it needs javadoc generated-->
    <target name="book">
        <copy file="src/site/apt/.aptconvert" todir="${env.HOME}" overwrite="true"/>
        <mkdir dir="${build.dir}/book"/>
        <copy todir="${build.dir}/book/images" overwrite="true">
            <fileset dir="src/site/resources/images"/>
        </copy>
        <copy todir="${build.dir}/book/images" overwrite="true">
            <fileset dir="src/site/resources/documentation/images"/>
        </copy>
        <copy todir="${build.dir}/book" overwrite="true">
            <fileset dir="src/site/apt/documentation">
                <include name="*.apt"/>
            </fileset>
            <fileset dir="src/site/apt">
                <include name="features.apt"/>
                <include name="samples.apt"/>
                <include name="nameandlogo.apt"/>
            </fileset>
            <fileset dir="src/site/resources/book"/>
        </copy>

        <replace dir="${build.dir}/book" token=".jpg" includes="*.apt"/>
        <replace dir="${build.dir}/book" token=".gif" includes="*.apt"/>
        <replace dir="${build.dir}/book" token=".png" includes="*.apt"/>

        <property name="extension" value="pdf"/>
        <antcall target="create_book" inheritall="true"/>

        <exec executable="pdftk" newenvironment="false" dir="${build.dir}/book" spawn="false">
            <arg value="blank_title_page.pdf"/>
            <arg value="EhcacheUserGuide.pdf"/>
            <arg value="cat"/>
            <arg value="output"/>
            <arg value="TempEhcacheUserGuide.pdf"/>
        </exec>
        <move file="${build.dir}/book/TempEhcacheUserGuide.pdf" tofile="${build.dir}/book/EhcacheUserGuide.pdf"/>

    </target>


    <target name="singlepageguide" description="Target for the Single Page HTML User Guide">
        <mkdir dir="${build.dir}/book"/>
        <copy todir="${build.dir}/book/images" overwrite="true">
            <fileset dir="src/site/resources/images"/>
        </copy>
        <copy todir="${build.dir}/book/images" overwrite="true">
            <fileset dir="src/site/resources/documentation/images"/>
        </copy>
        <copy todir="${build.dir}/book" overwrite="true">
            <fileset dir="src/site/resources/css"/>
        </copy>
        <copy todir="${build.dir}/book" overwrite="true">
            <fileset dir="src/site/apt/documentation">
                <include name="*.apt"/>
            </fileset>
            <fileset dir="src/site/apt">
                <include name="features.apt"/>
                <include name="samples.apt"/>
                <include name="nameandlogo.apt"/>
            </fileset>
        </copy>

        <replace dir="${build.dir}/book" token=".jpg" includes="*.apt"/>
        <replace dir="${build.dir}/book" token=".gif" includes="*.apt"/>
        <replace dir="${build.dir}/book" token=".png" includes="*.apt"/>

        <antcall target="create_singlepageguide" inheritall="true"/>

        <copy file="${build.dir}/book/EhcacheUserGuide.html" todir="${build.dir}/site"/>
        <copy file="src/site/resources/images/apt_toc.gif" todir="${build.dir}/site"/>
    </target>

    <macrodef name="create_artifact">
        <attribute name="extension" default="NOT SET"/>
        <element name="some-tasks" optional="yes"/>
        <sequential>
            <copy file="src/site/apt/.aptconvert" todir="${env.HOME}"/>
            <exec executable="aptconvert" newenvironment="false" dir="${build.dir}/book"
                  spawn="false" failifexecutionfails="true" failonerror="true">
                <arg value="EhcacheUserGuide.@{extension}"/>
                <arg value="preface.apt"/>
                <arg value="introduction.apt"/>
                <arg value="getting_started.apt"/>
                <arg value="features.apt"/>
                <arg value="concepts.apt"/>
                <arg value="configuration.apt"/>
                <arg value="storage_options.apt"/>
                <arg value="cache_eviction_algorithms.apt"/>
                <arg value="samples.apt"/>
                <arg value="dependencies.apt"/>
                <arg value="logging.apt"/>
                <arg value="remotedebugger.apt"/>
                <arg value="garbage_collection.apt"/>
                <arg value="jmx.apt"/>
                <arg value="class_loading.apt"/>
                <arg value="performance_considerations.apt"/>
                <arg value="cache_decorators.apt"/>
                <arg value="shutdown.apt"/>
                <arg value="jee_servlet_caching.apt"/>
                <arg value="distributed_caching.apt"/>
                <arg value="distributed_caching_with_rmi.apt"/>
                <arg value="distributed_caching_with_jgroups.apt"/>
                <arg value="distributed_caching_with_jms.apt"/>
                <arg value="distributed_caching_with_terracotta.apt"/>
                <arg value="constructs.apt"/>
                <arg value="cachemanager_event_listeners.apt"/>
                <arg value="cache_loaders.apt"/>
                <arg value="cache_event_listeners.apt"/>
                <arg value="cache_exception_handlers.apt"/>
                <arg value="cache_extensions.apt"/>
                <arg value="cache_server.apt"/>
                <arg value="hibernate.apt"/>
                <arg value="jsr107.apt"/>
                <arg value="glassfish.apt"/>
                <arg value="tomcat.apt"/>
                <arg value="building.apt"/>
                <arg value="faq.apt"/>
                <arg value="nameandlogo.apt"/>
            </exec>

        </sequential>
    </macrodef>

    <target name="prepare-book-resources">
        <antcall target="copy-ydoc"/>
    </target>

    <!-- Produce the ydocs images for the book and singlepage guide. Relies on Maven javadoc.  -->
    <target name="copy-ydoc" description="Creates the javadocs">
        <copy todir="${build.dir}/book/javadoc">
            <fileset dir="${build.dir}/site/apidocs"/>
        </copy>
    </target>

    <target name="unhide_html" description="unhides html">
        <replace dir="${build.dir}/site">
            <replacetoken><![CDATA[@standard_support@]]></replacetoken>
            <replacevalue><![CDATA[

<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="1346142">
<table>
<tr><td><input type="hidden" name="on0" value="Support Contacts (maximum of 2)">Support Contacts (maximum of 2)</td></tr><tr><td><input type="text" name="os0" maxlength="60">
<tr><td><input type="hidden" name="on1" value="Email Address">Email Address</td></tr><tr><td><input type="text" name="os1" maxlength="60">
</table>
<input type="image" src="https://www.paypal.com/en_AU/i/btn/btn_buynow_SM.gif" border="0" name="submit" alt="">
<img alt="" border="0" src="https://www.paypal.com/en_AU/i/scr/pixel.gif" width="1" height="1">
</form>

            ]]></replacevalue>
        </replace>

        <replace dir="${build.dir}/site">
            <replacetoken><![CDATA[@extended_support@]]></replacetoken>
            <replacevalue><![CDATA[
            
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="1391796">
<table>
<tr><td><input type="hidden" name="on0" value="Support Contacts (maximum of 2)">Support Contacts (maximum of 2)</td></tr><tr><td><input type="text" name="os0" maxlength="60">
<tr><td><input type="hidden" name="on1" value="Email Address">Email Address</td></tr><tr><td><input type="text" name="os1" maxlength="60">
</table>
<input type="image" src="https://www.paypal.com/en_AU/i/btn/btn_buynow_SM.gif" border="0" name="submit" alt="">
<img alt="" border="0" src="https://www.paypal.com/en_AU/i/scr/pixel.gif" width="1" height="1">
</form>

            ]]></replacevalue>
        </replace>

        <replace dir="${build.dir}/site">
            <replacetoken><![CDATA[@consulting@]]></replacetoken>
            <replacevalue><![CDATA[

<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="1393995">
<table>
<tr><td><input type="hidden" name="on0" value="Consulting Contacts (maximum of 2)">Consulting Contacts (maximum of 2)</td></tr><tr><td><input type="text" name="os0" maxlength="60">
<tr><td><input type="hidden" name="on1" value="Email Address">Email Address</td></tr><tr><td><input type="text" name="os1" maxlength="60">
</table>
<input type="image" src="https://www.paypal.com/en_AU/i/btn/btn_buynow_SM.gif" border="0" name="submit" alt="">
<img alt="" border="0" src="https://www.paypal.com/en_AU/i/scr/pixel.gif" width="1" height="1">
</form>

            ]]></replacevalue>
        </replace>

        <!--Add google code-->
        <replace dir="${build.dir}/site">
            <replacetoken><![CDATA[</body>]]></replacetoken>
            <replacevalue><![CDATA[
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-3138913-3");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
            ]]></replacevalue>
        </replace>
    </target>

    <target name="create_singlepageguide" depends="prepare-book-resources">
        <create_artifact extension="html"/>
    </target>


    <target name="create_book" depends="prepare-book-resources">
        <create_artifact extension="pdf"/>
    </target>


</project>
