#! /usr/bin/env rake
# requires meta_project e.g. sudo gem install meta_project archive-tar-minitar



$LOAD_PATH.unshift('lib')

require 'meta_project'
require 'rake/gempackagetask'
require 'rake/contrib/xforge'
require 'rake/clean'
require 'archive/tar/minitar'
require 'zlib'

#Things to clean
CLEAN.push('doc').push('dist')
#puts "Clean file list" + CLEAN.to_s



VER = 0.1

DISTDIR = "ruby-client/dist/ruby-client#{VER}"
TARDIST = "../#{DISTDIR}.tar.gz"

DATE_RE = %r<(\d{4})[./-]?(\d{2})[./-]?(\d{2})(?:[\sT]?(\d{2})[:.]?(\d{2})[:.]?(\d{2})?)?>

if ENV['RELEASE_DATE']
  year, month, day, hour, minute, second = DATE_RE.match(ENV['RELEASE_DATE']).captures
  year ||= 0
  month ||= 0
  day ||= 0
  hour ||= 0
  minute ||= 0
  second ||= 0
  ReleaseDate = Time.mktime(year, month, day, hour, minute, second)
else
  ReleaseDate = nil
end


task :default => [:clean] do |t|

end





task :test do |t|
  require 'test/unit/testsuite'
  require 'test/unit/ui/console/testrunner'

  runner = Test::Unit::UI::Console::TestRunner
#  $LOAD_PATH.unshift('./test/Ehcache')
  $stderr.puts "Checking for test cases:" if t.verbose
  files = Dir['test/**/*_test.rb']
  files.each do |testcase|
    $stderr.puts "\t#{testcase}" if t.verbose
    load testcase
  end

  suite = Test::Unit::TestSuite.new("ruby-client")

  ObjectSpace.each_object(Class) do |testcase|
    suite << testcase.suite if testcase < Test::Unit::TestCase
  end

  test_result = runner.run(suite)
  puts "test errors: " + test_result.error_count.to_s
  puts "test failures: " + test_result.failure_count.to_s
  if test_result.error_count > 0 or test_result.failure_count > 0
       #Exit showing error code so that we can detect failure
       exit(1)
  end

  

end

spec = eval(File.read("ruby-client.gemspec"))
spec.version = VER.to_s
desc "Build the RubyGem for ruby-client"
task :gem => [ :test ]
Rake::GemPackageTask.new(spec) do |g|
  g.need_tar    = false
  g.need_zip    = false
  g.package_dir = "dist"
end

desc "Look for TODO and FIXME tags in the code"
task :todo do
  rx = %r{#.*(FIXME|TODO|TBD|DEPRECATED)}
  Pathname.new(File.dirname(__FILE__)).egrep(rx) do |match|
    puts match
  end
end


desc "Build a ruby-client .tar.gz distribution."
task :tar => [ TARDIST ]
file TARDIST => [ :test ] do |t|
  current = File.basename(Dir.pwd)
  begin
    Dir.mkdir('dist')
  rescue SystemCallError => error
     puts "dist exists " + error.to_s
  end
  Dir.chdir("..") do
    begin
      files = %W(bin/**/* lib/**/* demo/**/* images/**/* CHANGELOG README
                 LICENCE setup.rb pre-setup.rb metaconfig)
      files = FileList[files.map { |file| File.join(current, file) }].to_a
      files.map! do |dd|
        ddnew = dd.gsub(/^#{current}/, DISTDIR)
        mtime = ReleaseDate || File.stat(dd).mtime
        if File.directory?(dd)
          { :name => ddnew, :mode => 0755, :dir => true, :mtime => mtime }
        else
          if dd =~ %r{bin/}
            mode = 0755
          else
            mode = 0644
          end
          data = File.open(dd, "rb") { |ff| ff.read }
          { :name => ddnew, :mode => mode, :data => data, :size => data.size,
            :mtime => mtime }
        end
      end

      ff = File.open(t.name.gsub(%r{^\.\./}o, ''), "wb")
      gz = Zlib::GzipWriter.new(ff)
      tw = Archive::Tar::Minitar::Writer.new(gz)

      files.each do |entry|
        if entry[:dir]
          tw.mkdir(entry[:name], entry)
        else
          tw.add_file_simple(entry[:name], entry) { |os| os.write(entry[:data]) }
        end
      end
    ensure
      tw.close if tw
      gz.close if gz
    end
  end
end
task TARDIST => [ :test ]

desc "Build the RDoc documentation for ruby-client"
task :docs do
  require 'rdoc/rdoc'
  rdoc_options = %w(--title Ehcache::Client --main README --line-numbers)
  files = FileList[*%w(README LICENCE ChangeLog bin/**/*.rb lib/**/*.rb demo/**/*.rb)]
  rdoc_options += files.to_a
  RDoc::RDoc.new.document(rdoc_options)
end

task :verify_rubyforge do
  raise "RUBYFORGE_USER environment variable not set!" unless ENV['RUBYFORGE_USER']
  raise "RUBYFORGE_PASSWORD environment variable not set!" unless ENV['RUBYFORGE_PASSWORD']
end

task :verify_gmail do
  raise "GMAIL_USER environment variable not set!" unless ENV['GMAIL_USER']
  raise "GMAIL_PASSWORD environment variable not set!" unless ENV['GMAIL_PASSWORD']
end





desc "Post a release announcement via GMail."
#task :email_announcement => [ :verify_gmail, :tar, :gem] do
task :email_announcement => [ :verify_gmail ] do
  GMailer.connect(ENV["GMAIL_USER"], ENV["GMAIL_PASSWORD"]) do |gmail|
    gmail.send  :to       => "ruby-talk@ruby-lang.org",
                :subject  => "[ANN] Ehcache ruby-client #{VER}",
                :body     => File.read("Release-Announcement")
  end
end

desc "Release the latest version."
task :release => [ :verify_rubyforge, :verify_gmail, :release_files,
  :publish_news, :email_announcement, :docs ]

desc "Build everything."
task :default => [ :tar, :gem, :docs ]




