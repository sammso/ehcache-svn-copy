 ---
 UnlockedReadsView
 ---

{UnlockedReadsView}

%{toc|fromDepth=2|toDepth=2}

    <<<UnlockedReadsView>>> is a {{{./cache_decorators}decorated cache}} which provides an incoherent view
    of a Terracotta coherent cache.
    You can have this and have the underlying coherent cache at the same time.  The UnlockedReadsView is placed
    in the CacheManager under its own name so that it can be separately referenced.

    The purpose of this is to allow business logic faster access to data. It is
    akin to the READ_UNCOMMITTED database isolation level. Normally a read lock must first be obtained to read data
    backed with Terracotta. If there is an outstanding write lock, the read lock queues up. This is done so that
    the <happens before> guarantee can be made. However if the business logic is happy to read stale data even
    if a write lock has been acquired in preparation for changing it, then much higher speeds can be obtained.

    Note that this view is only going to give incoherent reads to the underlying
    cache and not writes. Writes are going to be either coherent or incoherent depending on the underlying cache.

*   Creating an  UnlockedReadsView

**  Programmatically

---
    Cache cache = cacheManager.getCache("existingUndecoratedCache");
    UnlockedReadsView unlockedReadsView = new UnlockedReadsView(cache, newName);
    cacheManager.addCache(unlockedReadsView);  //adds an Ehcache
---

	NOTE: Right now, <<<UnlockedReadsView>>> only accepts <<<net.sf.ehcache.Cache>>> instances in the constructor, meaning
	it can be used to decorate only <<<net.sf.ehcache.Cache>>> instances. One disadvantage is that it cannot be used to 
	decorate other already decorated <<<net.sf.ehcache.Ehcache>>> instances like <<<NonStopCache>>>
	
**  By Configuration

    This view cannot be configured in ehcache.xml at this time - it must be configured programmatically.


*   {Download}

**  File

    Download {{{http://sourceforge.net/projects/ehcache/files/ehcache-unlockedreadsview}here}}.

**  Maven

    The UnlockedReadsView is in the ehcache-unlockedreadsview module in the Maven central repo.

    Add this snippet to your dependencies:

---

<dependency>
    <groupId>net.sf.ehcache</groupId>
    <artifactId>ehcache-unlockedreadsview</artifactId>
</dependency>
---

---

*   {Emerging API}

    This API is emerging. It is production quality and supported, but is a new API and may evolve over time.
