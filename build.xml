<project name="ehcache" default="clover" xmlns:artifact="urn:maven-artifact-ant">

    <!-- Load Maven antlib and make pom.xml available as maven.project -->
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
            <pathelement location="tools/maven-artifact-ant-2.0.4-dep.jar"/>
        </classpath>
    </typedef>

    <artifact:pom file="pom.xml" id="maven.project"/>


    <!-- Load local environment overrides -->
    <property environment="env"/>
    <!-- Default properties -->
    <property file="build.properties"/>

    <property name="name" value="${maven.project.name}"/>
    <property name="version" value="${maven.project.version}"/>

    <artifact:dependencies filesetId="dependency.fileset" pathId="dependency.classpath"
                           verbose="false">
        <pom refid="maven.project"/>
    </artifact:dependencies>

    <artifact:dependencies filesetId="compile.dependency.fileset" pathId="compile.dependency.classpath" useScope="compile">
        <pom refid="maven.project"/>
    </artifact:dependencies>

    <!-- Set up project.class.path -->
    <path id="project.class.path">
        <fileset dir="${lib.runtime.dir}" includes="**/*.jar,**/*.zip"/>
        <path refid="dependency.classpath"/>
    </path>

    <target name="clean" description="Cleans the build directory">
        <delete dir="${build.dir}"/>
    </target>

    <!-- Use this for doing releases -->
    <target name="build" depends="clean, checkstyle, dist-tgz, buildnumber"
            description="Builds a clean distribution"/>

    <!-- This is primarily used to make it easy to keep a log of commits, as this file will change for each commit -->
    <target name="buildnumber">
        <buildnumber/>
    </target>

    <!-- Generate Clover code coverage report -->
    <target name="clover"
            depends="clean, with.clover, checkstyle, test, clover.html, clover-check-coverage"
            description="Runs tests and test coverage">
        <echo message="Use ant build to build a distribution"/>
    </target>

    <!-- compiles -->
    <target name="compile" depends="compile-src, rmic, compile-tests"
            description="Performs a compile"/>



    <!-- Runs checkstyle over the java source -->
    <target name="checkstyle-check">
        <uptodate property="checkstyle.up-to-date" value="true"
                  targetfile="${build.dir}/checkstyle">
            <srcfiles dir="${src.java.dir}" includes="**/*.java"/>
            <srcfiles dir="${test.java.dir}" includes="**/*.java"/>
        </uptodate>
    </target>

    <!-- Runs checkstyle over the java source -->
    <target name="checkstyle" depends="generate-checkstyle-config, checkstyle-check"
            unless="checkstyle.up-to-date">
        <taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath>
                <path location="${test.classes.dir}"/>
                <path location="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
        </taskdef>
        <checkstyle config="${checkstyle.config}" failOnViolation="true">
            <fileset dir="${src.java.dir}/" includes="**/*.java"/>
            <fileset dir="${test.java.dir}" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="xml" tofile="${build.log.dir}/checkstyle-report.xml"/>
        </checkstyle>
    </target>

    <target name="generate-checkstyle-config">
        <mkdir dir="${build.log.dir}"/>
        <!-- Make hardcoded version available to IDE plugin -->
        <copy file="${checkstyle.config}" todir="${build.log.dir}">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>


    <!-- Compiles the source classes -->
    <target name="compile-src" description="compile src files">
        <mkdir dir="${build.classes.dir}"/>
        <javac destdir="${build.classes.dir}"
               target="1.4"
               debug="${compiler.debug}"
               deprecation="${compiler.deprecation}"
               source="1.4">
            <src location="${src.java.dir}"/>
            <classpath refid="project.class.path"/>
        </javac>
        <copy file="${src.config.dir}/ehcache-failsafe.xml" todir="${build.classes.dir}"/>
    </target>


    <target name="rmic">
        <rmic base="${build.classes.dir}" includes="**/RMICachePeer.class"
              excludes="**/*CLOVER*"/>
    </target>

    <target name="compile-tests" depends="compile-src">
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}"
               target="1.3"
               debug="${compiler.debug}"
               deprecation="${compiler.deprecation}"
               source="1.3">
            <src location="${test.java.dir}"/>
            <classpath>
                <path path="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
        </javac>
        <copy file="${test.config.dir}/ehcache.xml" todir="${test.classes.dir}"/>
        <copy file="${test.config.dir}/ehcache-2.xml" todir="${test.classes.dir}"/>
    </target>


    <target name="test" depends="test-non-web, test-orion, test-tomcat"
            description="Runs Tests">
        <antcall target="junitreport"/>
    </target>

    <target name="test-non-web" depends="compile, run-tests-no-check"
            if="tests.failed" description="Runs Tests">
        <fail message="One or more tests failed. See the log file for details."/>
    </target>

    <target name="test-web" depends="test-tomcat, test-orion"
            description="Integration tests for web containers"/>

    <target name="test-orion"
            depends="compile, prepare-web-tests, start-orion, run-web-tests-no-check-orion, stop-orion"
            if="tests.failed" description="Runs Tests">
        <fail message="One or more tests failed. See the log file for details."/>
    </target>

    <target name="test-tomcat"
            depends="compile, prepare-web-tests, start-tomcat, run-web-tests-no-check-tomcat, stop-tomcat"
            if="tests.failed" description="Runs Tests">
        <fail message="One or more tests failed. See the log file for details."/>
    </target>

    <!-- Make sure you have copied junit-3.8.1.jar to $ANT_HOME/lib -->
    <target name="run-tests-no-check">
        <mkdir dir="${test.results.dir}"/>

        <condition property="test.pattern" value="*">
            <not>
                <isset property="test.case"/>
            </not>
        </condition>
        <condition property="test.pattern" value="${test.case}">
            <isset property="test.case"/>
        </condition>

        <junit printSummary="true" failureproperty="tests.failed" fork="true" dir="${basedir}">
            <sysproperty key="java.util.logging.config.file"
                         file="${test.logging.properties.file}"/>
            <classpath>
                <path location="${test.classes.dir}"/>
                <path location="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="**/${test.directory.pattern}/**/${test.pattern}Test.class"/>
                    <exclude name="**/Abstract*"/>
                    <exclude name="**/constructs/web/**"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="run-web-tests-no-check-orion">
        <mkdir dir="${test.results.dir}"/>

        <condition property="test.pattern" value="*">
            <not>
                <isset property="test.case"/>
            </not>
        </condition>
        <condition property="test.pattern" value="${test.case}">
            <isset property="test.case"/>
        </condition>

        <junit printSummary="true" failureproperty="tests.failed" fork="true" dir="${basedir}">
            <sysproperty key="java.util.logging.config.file"
                         file="${test.logging.properties.file}"/>
            <classpath>
                <path location="${test.classes.dir}"/>
                <path location="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.classes.dir}">
                    <include
                            name="**/${test.directory.pattern}/**/constructs/web/**/${test.pattern}Test.class"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="run-web-tests-no-check-tomcat">
        <mkdir dir="${test.results.dir}"/>

        <condition property="test.pattern" value="*">
            <not>
                <isset property="test.case"/>
            </not>
        </condition>
        <condition property="test.pattern" value="${test.case}">
            <isset property="test.case"/>
        </condition>

        <junit printSummary="true" failureproperty="tests.failed" fork="true" dir="${basedir}">
            <sysproperty key="java.util.logging.config.file"
                         file="${test.logging.properties.file}"/>
            <classpath>
                <path location="${test.classes.dir}"/>
                <path location="${build.classes.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.classes.dir}">
                    <include
                            name="**/${test.directory.pattern}/**/constructs/web/**/${test.pattern}Test.class"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Transform test results into a junit report. -->
    <target name="junitreport">
        <echo message="Compiling JUnit Report"/>
        <mkdir dir="${test.report.dir}"/>
        <junitreport todir="${test.report.dir}" tofile="${test.log.file}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.report.dir}"/>
        </junitreport>
    </target>

    <!-- Builds a jar file containing for the application  -->
    <target name="dist-jar" depends="compile" description="Builds the application jar">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${name}-${version}.jar">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
        </jar>
    </target>

    <artifact:dependencies filesetId="runtime-dependencies.fileset">
        <dependency groupId="commons-logging" artifactId="commons-logging" version="1.0.4"/>
    </artifact:dependencies>

    <!-- Builds a remote debugger jar  -->
    <target name="remote-debugger-jar" depends="compile"
            description="Builds the application jar">
        <mkdir dir="${dist.dir}/"/>
        <mkdir dir="${dist.dir}/remotedeps"/>
        <copy todir="${dist.dir}/remotedeps" flatten="true">
            <fileset refid="runtime-dependencies.fileset"/>
        </copy>
        <jar destfile="${dist.dir}/${name}-${version}-remote-debugger.jar">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${test.classes.dir}">
                <include name="**/RemoteDebugger.class"/>
            </fileset>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
            <zipfileset src="${dist.dir}/remotedeps/commons-logging-1.0.4.jar"/>
            <manifest>
                <attribute name="Main-Class"
                           value="net.sf.ehcache.distribution.RemoteDebugger"/>
            </manifest>
        </jar>
        <delete dir="${dist.dir}/remotedeps"/>
    </target>

    <!-- Builds a release tar-ball -->
    <target name="dist-tgz" depends="dist-jar, dist-javadoc, dist-sources, remote-debugger-jar">
        <tar destfile="${dist.dir}/${name}-${version}.tgz"
             compression="gzip">
            <tarfileset dir="${dist.dir}" prefix="${name}-${version}">
                <include name="${name}-${version}.jar"/>
                <include name="${name}-${version}-${javadoc.zip}"/>
                <include name="${name}-${version}-src.zip"/>
                <include name="${name}-${version}-remote-debugger.jar"/>
            </tarfileset>
            <tarfileset dir="${basedir}" prefix="${name}-${version}">
                <include name="RELEASE_NOTES.txt"/>
                <include name="LICENSE.txt"/>
                <include name="CHANGELOG.txt"/>
                <include name="lib/**"/>
            </tarfileset>
            <tarfileset dir="${src.config.dir}" prefix="${name}-${version}">
                <include name="ehcache.*"/>
            </tarfileset>
        </tar>
    </target>

    <!-- Builds a maven upload bundle -->
    <target name="maven-bundle" depends="dist-tgz">
        <copy file="${dist.dir}/${name}-${version}-${javadoc.zip}"
              tofile="${dist.dir}/${name}-${version}-javadoc.jar"/>
        <copy file="${basedir}/pom.xml" tofile="${dist.dir}/${name}-${version}.pom"/>
        <copy file="${basedir}/LICENSE.txt" tofile="${dist.dir}/${name}-${version}.license"/>
        <jar destfile="${dist.dir}/${name}-${version}-bundle.jar">
            <fileset dir="${dist.dir}/">
                <include name="${name}-${version}.pom"/>
                <include name="${name}-${version}.license"/>
                <include name="${name}-${version}.jar"/>
                <include name="${name}-${version}-javadoc.jar"/>
                <include name="${name}-${version}-sources.jar"/>
                <include name="${name}-${version}-remote-debugger.jar"/>
            </fileset>
        </jar>
    </target>

    <target name="upload-to-repository" depends="dist-tgz" description="upload to maven repository">
        <!--<artifact:install-provider artifactId="wagon-webdav" version="1.0-beta-1"/>-->
        <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-1"/>
        <!--install locally-->
        <!--<artifact:install file="${dist.dir}/${name}-${version}.jar">-->
            <!--<pom refid="maven.project"/>-->
        <!--</artifact:install>-->
        <!--upload to repository, either release or snapshot depdening on version numbering -->
        <artifact:deploy file="${dist.dir}/${name}-${version}.jar">
            <pom refid="maven.project"/>
        </artifact:deploy>
        <artifact:deploy file="${dist.dir}/${name}-${version}-sources.jar">
            <pom refid="maven.project"/>
        </artifact:deploy>
    </target>

    <!-- Create zip file for javadocs -->
    <target name="dist-javadoc" depends="javadoc"
            description="Creates a zip file for javadocs">
        <zip destfile="${dist.dir}/${name}-${version}-${javadoc.zip}">
            <zipfileset dir="${build.javadoc.dir}" prefix="docs/"/>
        </zip>
    </target>

    <!-- Create a jar file for src -->
    <target name="dist-sources" description="Creates a zip file for src">
        <jar destfile="${dist.dir}/${name}-${version}-sources.jar">
            <zipfileset dir="${src.java.dir}"/>
        </jar>
    </target>

    <property name="classpath" refid="project.class.path"/>

    <!-- Produce the javadocs. Note the maven version of javadoc includes yDoc. Too big to include in download though  -->
    <target
            name="javadoc"
            description="Creates the javadocs">

        <mkdir dir="${build.javadoc.dir}"/>
        <javadoc
                sourcepath="${src.java.dir}"
                destdir="${build.javadoc.dir}"
                packagenames="net.sf.*"
                Package="true"
                overview="${src.java.dir}/net/sf/ehcache/overview.html"
                author="true"
                version="true"
                use="true"
                windowtitle="${name}">
            <tag name="noinspection" description="IntelliJ Inspection Ignore tag"
                 enabled="false"/>
            <classpath refid="project.class.path"/>
            <header><![CDATA[<a href="/" target="_top">${name}</a>]]></header>
        </javadoc>
    </target>


    <!-- Not Broken in TeamCity 1.1 -->
    <taskdef resource="com/cenqua/ant/antlib.xml" classpath="tools/cenquatasks.jar"/>
    <extendclasspath path="tools/clover-1.3.13.jar"/>

    <taskdef resource="clovertasks" classpath="tools/clover-1.3.13.jar"/>
    <typedef resource="clovertypes">
        <classpath refid="project.class.path"/>
    </typedef>

    <target name="with.clover">
        <mkdir dir="${build.log.dir}"/>
        <clover-setup initString="${build.log.dir}/mycoverage.db"
                      flushpolicy="directed">
            <fileset dir="${src.java.dir}/" includes="**/*.java"/>
            <statementContext name="log" regexp="^LOG\..*"/>
            <statementContext name="iflog" regexp="^if \(LOG\.is.*"/>
        </clover-setup>
    </target>

    <target name="clover.html" depends="with.clover">

        <clover-report>
            <current outfile="${build.log.dir}/clover">
                <format type="html" filter="log,iflog,catch"/>
            </current>
        </clover-report>
        <clover-log level="summary" filter="log,iflog,catch"/>
    </target>

    <target name="clover-check-coverage" depends="with.clover" if="singleRMIRegistryPerVM">
        <echo message="Java: ${ant.java.version}"/>
        <clover-check target="${clover.test.coverage.percentage}" filter="log,iflog,catch"
                      haltOnFailure="true"/>
    </target>

    <!-- JDKs below 1.5 do not support multiple RMI Registries per VM and we must therefore exclude some tests -->
    <condition property="singleRMIRegistryPerVM" value="true">
        <not>
            <or>
                <equals arg1="1.3" arg2="${ant.java.version}"/>
                <equals arg1="1.4" arg2="${ant.java.version}"/>
            </or>
        </not>
    </condition>

    <!-- Start up the test instance of the Orion server -->
    <target name="start-orion" description="Starts the Orion server">
        <echo>Starting Orion on ${os.name}</echo>
        <exec dir="${build.orion.dir}" spawn="true" os="Mac OS X, Linux" executable="sh">
            <arg line="orion_sh_and.bat"/>
        </exec>
        <waitfor maxwait="10000" checkevery="1500">
            <http url="http://localhost:8080"/>
        </waitfor>
        <echo message="...Started"/>
    </target>

    <!-- Stop the test instance of the Orion server -->
    <target name="stop-orion" description="Stops the Orion server">
        <echo>Stopping Orion</echo>
        <waitfor maxwait="5000" checkevery="500">
            <http url="http://localhost:8080/Exit.jsp"/>
        </waitfor>
        <echo message="...Stopped"/>
    </target>

    <target name="prepare-web-tests"
            depends="compile, dist-jar, deploy-default-web-app-orion, deploy-default-web-app-tomcat"
            if="${run.web.tests}"
            description="Prepare to run  the web tests ">
    </target>

    <artifact:dependencies filesetId="clover.fileset">
        <dependency groupId="com.cenqua.clover" artifactId="clover"
              version="1.3.13"/>
    </artifact:dependencies>

    <target name="deploy-default-web-app-orion">
        <unzip dest="${build.dir}" src="${lib.compile.dir}/web/orion.zip"/>
        <copy file="${dist.dir}/${name}-${version}.jar" todir="${build.orion.lib.dir}"/>
        <copy todir="${build.orion.lib.dir}" flatten="true">
            <fileset refid="runtime-dependencies.fileset"/>
        </copy>
        <copy todir="${build.orion.lib.dir}" flatten="true">
            <fileset refid="clover.fileset"/>
        </copy>
        <copy file="${test.config.dir}/ehcache.xml" todir="${build.orion.lib.dir}"/>
        <copy file="logging.properties" todir="${build.orion.dir}"/>
        <jar destfile="${build.orion.lib.dir}/${name}-tests-${version}.jar">
            <fileset dir="${test.classes.dir}"/>
        </jar>
        <copy todir="${build.orion.dir}">
            <fileset dir="${test.config.dir}" includes="default-web-app/**"
                     excludes="**/WEB-INF/**"/>
        </copy>

        <copy todir="${build.orion.dir}/default-web-app/WEB-INF">
            <fileset dir="${test.config.dir}/default-web-app/WEB-INF/2_3"/>
        </copy>

        <condition property="unix">
            <and>
                <os family="unix"/>
                <not>
                    <os name="Mac OS X"/>
                </not>
            </and>
        </condition>
        <antcall target="copy-tools-lib"/>
    </target>


    <target name="deploy-default-web-app-tomcat">
        <untar dest="${build.dir}" src="${lib.compile.dir}/web/apache-tomcat-5.5.17.tgz"
               compression="gzip"/>
        <mkdir dir="${build.tomcat.defaultwebapp.dir}"/>
        <mkdir dir="${build.tomcat.defaultwebapp.dir}/WEB-INF/classes"/>
        <mkdir dir="${build.tomcat.defaultwebapp.dir}/WEB-INF/lib"/>
        <copy file="${dist.dir}/${name}-${version}.jar"
              todir="${build.tomcat.defaultwebapp.dir}/WEB-INF/lib"/>
        <copy todir="${build.tomcat.defaultwebapp.dir}/WEB-INF/lib" flatten="true">
            <fileset refid="runtime-dependencies.fileset"/>
        </copy>
        <copy todir="${build.tomcat.defaultwebapp.dir}/WEB-INF/lib" flatten="true">
            <fileset refid="clover.fileset"/>
        </copy>
        <copy file="${test.config.dir}/ehcache.xml"
              todir="${build.tomcat.defaultwebapp.dir}/WEB-INF/classes"/>
        <copy file="logging.properties" todir="${build.orion.dir}"/>
        <jar destfile="${build.tomcat.defaultwebapp.dir}/WEB-INF/lib/${name}-tests-${version}.jar">
            <fileset dir="${test.classes.dir}"/>
        </jar>
        <copy todir="${build.tomcat.defaultwebapp.dir}">
            <fileset dir="${test.config.dir}/default-web-app">
                <exclude name="**/WEB-INF/**"/>
            </fileset>
        </copy>
        <copy todir="${build.tomcat.defaultwebapp.dir}/WEB-INF">
            <fileset dir="${test.config.dir}/default-web-app/WEB-INF/2_4/"/>
        </copy>

        <condition property="unix">
            <and>
                <os family="unix"/>
                <not>
                    <os name="Mac OS X"/>
                </not>
            </and>
        </condition>
    </target>


    <target name="deploy-default-web-app-glassfish">
        <!--<untar dest="${build.dir}" src="${lib.compile.dir}/web/apache-tomcat-5.5.17.tgz" compression="gzip"/>-->
        <mkdir dir="${build.glassfish.dir}"/>
        <mkdir dir="${build.glassfish.webapp.dir}"/>
        <mkdir dir="${build.glassfish.webapp.dir}/WEB-INF/classes"/>
        <mkdir dir="${build.glassfish.webapp.dir}/WEB-INF/lib"/>
        <copy file="${dist.dir}/${name}-${version}.jar"
              todir="${build.glassfish.webapp.dir}/WEB-INF/lib"/>
        <copy todir="${build.glassfish.webapp.dir}/WEB-INF/lib" flatten="true">
            <fileset refid="runtime-dependencies.fileset"/>
        </copy>
        <copy todir="${build.glassfish.webapp.dir}/WEB-INF/lib" flatten="true">
            <fileset refid="clover.fileset"/>
        </copy>
        <copy file="${test.config.dir}/ehcache.xml"
              todir="${build.glassfish.webapp.dir}/WEb-INF/classes"/>
        <copy file="logging.properties" todir="${build.orion.dir}"/>
        <jar destfile="${build.glassfish.webapp.dir}/WEB-INF/lib/${name}-tests-${version}.jar">
            <fileset dir="${test.classes.dir}"/>
        </jar>
        <copy todir="${build.glassfish.webapp.dir}">
            <fileset dir="${test.config.dir}/default-web-app">
                <exclude name="**/WEB-INF/**"/>
            </fileset>
        </copy>
        <copy todir="${build.glassfish.webapp.dir}/WEB-INF">
            <fileset dir="${test.config.dir}/default-web-app/WEB-INF/2_5/"/>
        </copy>
        <jar destfile="${build.dir}/glassfish.war">
            <fileset dir="${build.glassfish.dir}"/>
        </jar>
        <copy todir="${build.glassfish.webapp.deploy.dir}" file="${build.dir}/glassfish.war"/>
    </target>


    <!-- Start up the test instance of the Tomcat server -->
    <target name="start-tomcat" description="Starts the Orion server">
        <echo>Starting Tomcat on ${os.name}</echo>
        <exec dir="${build.tomcat.dir}/bin" spawn="true" os="Mac OS X, Linux" executable="sh">
            <arg line="tomcat_sh_and.bat"/>
        </exec>
        <waitfor maxwait="10000" checkevery="1500">
            <http url="http://localhost:8080"/>
        </waitfor>
        <echo message="...Started"/>
    </target>

    <!-- Stop the test instance of the Tomcat server -->
    <target name="stop-tomcat" description="Stops the Orion server">
        <echo>Stopping Tomcat</echo>
        <exec dir="${build.tomcat.dir}/bin" spawn="true" os="Mac OS X, Linux" executable="sh">
            <arg line="tomcat_stop_sh_and.bat"/>
        </exec>
        <echo message="...Stopped"/>
    </target>

    <target name="copy-tools-lib" if="unix">
        <copy todir="${build.orion.dir}" file="${java.home}/../lib/tools.jar"/>
    </target>

    <target name="book" depends="prepare-book-resources, fast-book"/>

    <!-- Requres LaTeX and netpbm-->
    <target name="fast-book">
        <mkdir dir="${build.dir}/book"/>
        <copy todir="${build.dir}/book/images">
            <fileset dir="src/site/resources/images"/>
        </copy>
        <copy todir="${build.dir}/book">
            <fileset dir="src/site/apt/documentation">
                <include name="*.apt"/>
            </fileset>
            <fileset dir="src/site/apt">
                <include name="features.apt"/>
                <include name="samples.apt"/>
                <include name="nameandlogo.apt"/>
            </fileset>
        </copy>

        <property name="extension" value="pdf"/>
        <antcall target="create_book" inheritall="true"/>
        <copy file="${build.dir}/book/EhcacheUserGuide.pdf" todir="${build.dir}/site"/>
    </target>


    <target name="singlepageguide">
        <mkdir dir="${build.dir}/book"/>
        <copy todir="${build.dir}/book/images">
            <fileset dir="src/site/resources/images"/>
        </copy>
        <copy todir="${build.dir}/book">
            <fileset dir="src/site/resources/css"/>
        </copy>
        <copy todir="${build.dir}/book">
            <fileset dir="src/site/apt/documentation">
                <include name="*.apt"/>
            </fileset>
            <fileset dir="src/site/apt">
                <include name="features.apt"/>
                <include name="samples.apt"/>
                <include name="nameandlogo.apt"/>
            </fileset>
        </copy>
        <antcall target="create_singlepageguide" inheritall="true"/>

        <copy file="${build.dir}/book/EhcacheUserGuide.html" todir="${build.dir}/site"/>
        <copy file="${build.dir}/book/book.css" todir="${build.dir}/site"/>
        <copy file="src/site/resources/images/apt_toc.gif" todir="${build.dir}/site"/>
    </target>

    <macrodef name="create_artifact">
        <attribute name="extension" default="NOT SET"/>
        <element name="some-tasks" optional="yes"/>
        <sequential>
            <exec executable="aptconvert" newenvironment="false" dir="${build.dir}/book"
                  spawn="false">
                <arg value="EhcacheUserGuide.@{extension}"/>
                <arg value="preface.apt"/>
                <arg value="introduction.apt"/>
                <arg value="getting_started.apt"/>
                <arg value="features.apt"/>
                <arg value="concepts.apt"/>
                <arg value="samples.apt"/>
                <arg value="dependencies.apt"/>
                <arg value="logging.apt"/>
                <arg value="class_loading.apt"/>
                <arg value="performance_considerations.apt"/>
                <arg value="cache_decorators.apt"/>
                <arg value="configuration.apt"/>
                <arg value="storage_options.apt"/>
                <arg value="shutdown_considerations.apt"/>
                <arg value="hibernate.apt"/>
                <arg value="distributed_design.apt"/>
                <arg value="distributed_caching.apt"/>
                <arg value="constructs_design.apt"/>
                <arg value="cachemanager_event_listeners.apt"/>
                <arg value="cache_event_listeners.apt"/>
                <arg value="faq.apt"/>
                <arg value="nameandlogo.apt"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="prepare-book-resources" depends="compile, ydoc"/>

    <!-- Produce the ydocs images for the book and singlepage guide.  -->
    <target
            name="ydoc"
            description="Creates the javadocs">

        <javadoc
                sourcepath="${src.java.dir}"
                destdir="${build.dir}/book/apidocs"
                packagenames="net.sf.*"
                Package="true"
                overview="${src.java.dir}/net/sf/ehcache/overview.html"
                author="true"
                version="true"
                use="true"
                windowtitle="${name}"
                doclet="ydoc.doclets.YStandard"
                docletpath="${basedir}/tools/ydoc-2.2_02-jdk1.5/lib/ydoc.jar:${basedir}/tools/ydoc-2.2_02-jdk1.5/lib/class2svg.jar:${basedir}/tools/ydoc-2.2_02-jdk1.5/resources:${build.classes.dir}"
                additionalparam="-umlautogen">
            <tag name="noinspection" description="IntelliJ Inspection Ignore tag"
                 enabled="false"/>
            <tag name="revised"
                 description="Indicates the version a public APU method was revised"
                 enabled="true"/>
            <classpath refid="project.class.path"/>
            <header><![CDATA[<a href="/" target="_top">${name}</a>]]></header>
        </javadoc>
    </target>


    <target name="create_singlepageguide" depends="prepare-book-resources">
        <create_artifact extension="html"/>
    </target>


    <target name="create_book" depends="prepare-book-resources">
        <create_artifact extension="pdf"/>
    </target>


</project>
