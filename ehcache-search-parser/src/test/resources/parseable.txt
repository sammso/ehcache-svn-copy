// things which should parse. a sampler.

// simplest
select * from foo
select key from foo
select key,value from foo
select value from foo
select *,key,value from foo
select *,key from foo
select *,value from foo

// all is an alias for * and vice versa
select all from foo
select all, key from foo
select all, key, value from foo


// cache manager inclusion
select * from foo.bar

// really simple  where clause
select * from foo where name = 'foo'
select * from foo where name != 'foo'
select * from foo where name < 'foo'
select * from foo where name > 'foo'
select * from foo where name <= 'foo'
select * from foo where name >= 'foo'
select key from foo where name = 'foo'
select key from foo where name != 'foo'
select key from foo where name < 'foo'
select key from foo where name > 'foo'
select key from foo where name <= 'foo'
select key from foo where name >= 'foo'
select key,value from foo where name = 'foo'
select key, value from foo where name != 'foo'
select key, value  from foo where name < 'foo'
select key,value  from foo where name > 'foo'
select key,value from foo where name <= 'foo'
select key ,value from foo where name >= 'foo'
select key,a,b from foo where bar is not null
select key,a,b from foo where value is null

// aggregates
select count(*) from foo where bar > 'baz'
select count(bar) from foo where bar > 'baz'
select fubar, count(bar) from foo where bar > 'baz'

// between
select * from foo where (age between 10 and 20)

// isbetween
select * from foo where (age isbetween 10 20)
select * from foo where (age isbetween [10 20)
select * from foo where (age isbetween 10 20])
select * from foo where (age isbetween [10 20])

// ilike
select * from foo where (name ilike 'foo.*bar')

// add some aggregators to the target list
select key,sum(foo) from foo
select key,sum(foo) from foo where age>10
select key,sum(foo),min(age) from foo where age>10
select avg(foo) from bar where (foo isbetween [100 200]) 

// ok, some casting. note that no parsing is done inside the quoted string which is cast.
select * from foo where ( age = (bool)'true')
select * from foo where age = (byte)11
select * from foo where age = (short)11
select * from foo where age = 11
select * from foo where age = (int)11
select * from foo where age = '11'
select * from foo where age = (char)'1'
select * from foo where age = (long)11
select * from foo where age = (double)'11.1'
select * from foo where age = (float)'11.1'
select * from foo where age = (date)'1/10/2003 14:25:22'
select * from foo where age = (sqldate)'1/1/04'
select * from foo where name = 'A'

// jdk specific naming I suppose, for an inner class.
// better to have the enum exist as its own file
select * from foo where age = (enum net.sf.ehcache.search.parser.ParseModelTest$Foo)'Bar'

// some ands
select key,value from foo where (age > 100 and zip=20144)
select key,value from foo where (age > 100 and zip=20144 and time > 10)
select key,value from foo where ((age > 100 and zip=20144) and time > 10 and fun>100)
select key from foo where (a is not null and value is null)

// some ors
select key,value from foo where (age > 100 or zip=20144)
select key,value from foo where (age > 100 or zip=20144 or time > 10)
select key,value from foo where ((age > 100 or zip=20144) or time > 10 or fun>100)
select key from foo where (a is not null or value is null)

// ors and ands, partying together
select key,value from foo where ((age > 100 and zip=20144) or time > 10)
select key,value from foo where ((age > 100 or zip=20144) and (time > 10 or fun>100))
select key,value from foo where ((age > 100 or zip=20144) and time > 10)
select key,value from foo where ((age > 100 and zip=20144) or (time > 10 and fun>100))
select age from foo where ((a is not null or b is null) and value is null)

// group by?
select age from foo where ((age > 100 and zip=20144) or time > 10) group by age 
select age, zip from foo where ((age > 100 and zip=20144) or time > 10) group by age, zip
select zip, age from foo where ((age > 100 and zip=20144) or time > 10) group by age, zip

// order by?
select * from foo where ((age > 100 and zip=20144) or time > 10) order by age 
select * from foo where ((age > 100 and zip=20144) or time > 10) order by age, zip

// order and group by, mixing order
select age from foo where ((age > 100 and zip=20144) or time > 10) group by age order by age  
select age, zip from foo where ((age > 100 and zip=20144) or time > 10) group by age, zip order by age, zip
select age from foo where ((age > 100 and zip=20144) or time > 10) order by age group by age 
select age, zip from foo where ((age > 100 and zip=20144) or time > 10) order by age, zip group by age, zip
select age, zip from foo where ((age > 100 and zip=20144) or time > 10) order by age, zip group by age, zip

// limit must go on the end!
select age, zip from foo where ((age > 100 and zip=20144) or time > 10) order by age, zip group by age, zip limit 10

// some quoting chicanery
select * from foo where foo='tom\\'
select * from foo where foo='tom\'foo'
select * from foo where foo='tom\nfoo'
select * from foo where foo='tom\rfoo'
select * from foo where foo='tom\tfoo'
select * from foo where foo='tom"foo'
select * from foo where foo='tom\u0065oo'

// some dating
select * from foo where name= (date)'12/1/2012 10:10:20'
select * from foo where name= (date)'12/1/2012'
select * from foo where name= (date)'12/1/2012 10:22'
select * from foo where name= (date)'12/1/2012 10:10:22.433 EST'

// iso+timezone
select * from foo where name= (date)'1966-03-29 EST'
select * from foo where name= (date)'1966-03-29T08:10:22.433 EST'
select * from foo where name= (date)'1966-03-29T14:10:22.433 EST'

// in clause
select * from foo where age in (18, 21, 30)

