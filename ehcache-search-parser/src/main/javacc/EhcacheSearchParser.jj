options
{
  STATIC = false;
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = false;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(EhcacheSearchParser)

package net.sf.ehcache.search.parser;
import java.text.DateFormat;
import net.sf.ehcache.search.parser.ParserSupport;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import net.sf.ehcache.search.parser.ParseModel;
import net.sf.ehcache.search.parser.MAttribute;
import net.sf.ehcache.search.parser.MCriteria;
import net.sf.ehcache.search.parser.MAggregate;
import net.sf.ehcache.search.parser.MTarget;
import net.sf.ehcache.search.parser.MValue;
import net.sf.ehcache.search.parser.ModelElement;
import net.sf.ehcache.search.parser.InteractiveCmd;
import net.sf.ehcache.search.parser.CustomParseException;
import net.sf.ehcache.search.parser.CustomParseException.Message;

public class EhcacheSearchParser
{
  static final class StringAndToken
  {
    Token token;
    String string;
    StringAndToken(Token tok, String s)
    {
      this.token = tok;
      this.string = s;
    }
  }

  private ParseModel qmodel;

  public ParseModel getModel()
  {
    return qmodel;
  }
}

PARSER_END(EhcacheSearchParser)




TOKEN [ IGNORE_CASE ] :
{
  < KW_STAR : "*" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_ALL : "all" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_COMMA : "," >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_OPEN_PAREN : "(" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_CLOSED_PAREN : ")" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_LSQUARE : "[" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_RSQUARE : "]" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_EQ : "=" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_NE : "!=" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_NULL : "IS NULL" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_NOT_NULL : "IS NOT NULL" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_GE : ">=" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_GT : ">" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_LE : "<=" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_LT : "<" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_KEY : "key" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_VALUE : "value" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_WHERE : "where" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_NOT : "not" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_ISBETWEEN : "isbetween" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_BETWEEN : "between" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_ILIKE : "ilike" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_LIKE : "like" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_IN : "in" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_AND : "and" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_OR : "or" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_SUM : "sum" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_MAX : "max" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_MIN : "min" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_AVG : ("average"|"avg") >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_COUNT : "count" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_SELECT : "select" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_FROM : "from" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_LIMIT : "limit" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_BOOL_CAST : "(bool)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_BYTE_CAST : "(byte)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_INT_CAST : "(int)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_SHORT_CAST : "(short)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_LONG_CAST : "(long)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_FLOAT_CAST : "(float)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_DOUBLE_CAST : "(double)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_DATE_CAST : "(date)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_STRING_CAST : "(string)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_SQLDATE_CAST : "(sqldate)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_CHAR_CAST : "(char)" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_SHORT_DESC : "desc" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_SHORT_ASC : "asc" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_DESC : "descending" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_ASC : "ascending" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_ORDER_BY : "order by" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_USE_CACHE : "use cache" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_USE_CACHE_MANAGER : "use cache manager" >
}

TOKEN [ IGNORE_CASE ] :
{
  < KW_GROUP_BY : "group by" >
}

TOKEN :
{
  < FIXEDINT : ("-")?([ "0"-"9" ])+ >
}



TOKEN :
{
  < QUOTEDSTR :
    "'"
    (
      ~[ "\'", "\\" ]
    | ("\\" ~[ ])
    )*
    "'" >
}

TOKEN [ IGNORE_CASE ] :
{
  < STRING : (["A"-"Z", "0"-"9", ".", "-", "_", "\\", "/"])+ >
}

TOKEN :
{
  < ENUMFQCLASSNAME : "enum" ([ " " ])+ < FQCLASSNAME >>
}

TOKEN :
{
  < #FQCLASSNAME :
    (
      (~[ ".", " ", ",", ")", "(", "'" ])+
      (
        [ "." ] (~[ " ", ".", ",", ")", "(", "'" ])+
      )*
    ) >
}

/**
TOKEN [ IGNORE_CASE ] :
{
  < IN_CLAUSE_TARGET : "[" 
}
*/

SKIP :
{
  " "
| "\t"
| "\n"
}

InteractiveCmd InteractiveCommand() :
{
  InteractiveCmd cmd;
  String s;
  ParseModel qm;
}
{
  (
    s = UseCache() < EOF >
  )
  {
    cmd = new InteractiveCmd(InteractiveCmd.Cmd.UseCache, s);
  }
|
  (
    s = UseCacheManager() < EOF >
  )
  {
    cmd = new InteractiveCmd(InteractiveCmd.Cmd.UseCacheManager, s);
  }
| qm = QueryStatement()
  {
    cmd = new InteractiveCmd(qm);
  }
  {
    return cmd;
  }
}

/**
 * Production for specifying a cache to use.
 */
String UseCache() :
{
  StringAndToken s;
}
{
  (
    < KW_USE_CACHE > s = SingleQuotedString()
  )
  {
    return s.string;
  }
}

/**
 * Production for specifying a cache manager to use.
 */
String UseCacheManager() :
{
  StringAndToken s;
}
{
  (
    < KW_USE_CACHE_MANAGER > s = SingleQuotedString()
  )
  {
    return s.string;
  }
}

/**
 * Select production.
 */
ParseModel QueryStatement() :
{
  this.qmodel = new ParseModel();
  MCriteria crit = null;
  String cacheName;
}
{
  < KW_SELECT > TargetList() (<KW_FROM> ( cacheName = CacheName() { this.qmodel.setCacheName(cacheName); } ) )
  (
    < KW_WHERE >
    (
      crit = Criteria()
      {
        this.qmodel.setCriteria(crit);
      }
    )
  )?
  PostScript() < EOF >
  {
    return qmodel;
  }
}

/*
Token Select() :
{
  Token t;
}
{
    (
        t = < KW_SELECT > | t = < STRING >
    )
    {
        return t;
    }

}
*/

/**
 * THe tail end of a select statement, covering group by, order by and limit.
 */
void PostScript() :
{}
{
  (
    GroupBy()
  | OrderBy()
  )*
  (
    Limit()
  )?
}

/**
 * Group by production.
 */
void GroupBy() :
{
  MAttribute attr1;
  MAttribute attr2;
}
{
  (
    < KW_GROUP_BY > attr1 = Attribute()
    {
      this.qmodel.addGroupBy(attr1);
    }
    (
      < KW_COMMA > attr2 = Attribute()
        {
            this.qmodel.addGroupBy(attr2);
        }
    )*
  )
}



/**
 * Order by production.
 */
void OrderBy() :
{
  boolean isAsc = true;
  MAttribute attr1;
  MAttribute attr2;
}
{
  (
    < KW_ORDER_BY > attr1 = Attribute()
    (
      < KW_ASC >
    | < KW_DESC >
      {
        isAsc = false;
      }
    | < KW_SHORT_ASC >
    | < KW_SHORT_DESC >
      {
        isAsc = false;
      }
    )?
    {
      this.qmodel.addOrderBy(attr1, isAsc);
    }
      (
        < KW_COMMA > attr2 = Attribute()
        (
          < KW_ASC >
        | < KW_DESC >
          {
            isAsc = false;
          }
        | < KW_SHORT_ASC >
        | < KW_SHORT_DESC >
          {
            isAsc = false;
          }
        )?
        {
            this.qmodel.addOrderBy(attr2, isAsc);
        }
      )*
  )
}

/**
 * Limit production. 
 */
void Limit() :
{
  Token t;
}
{
  < KW_LIMIT > t = < FIXEDINT >
  {
    int lim = Integer.parseInt(t.image);
    this.qmodel.setLimit(lim);
  }
}

/**
 * One monolithic criteria. 
 */
MCriteria Criteria() :
{
  MCriteria crit;
}
{
  (
    crit = PCriteria()
  | crit = SimpleCriteria()
  )
  {
    return crit;
  }
}

String CacheName() :
{
  String name;
}
{
 name = UnQuotedString()
   {
     return name;
   }
}

/**
 * A parenthesized criterium. Not, And, Or.
 */
MCriteria PCriteria() :
{
  MCriteria crit;
  List < MCriteria > crits = new ArrayList < MCriteria > (10);
  boolean isNot = false;
  boolean isAnd = false;
}
{
  < KW_OPEN_PAREN >
  (
    (
      (< KW_NOT >) crit = PCriteria()
    )
    {
      crits.add(crit);
      isNot = true;
    }

  |

    (
      crit = Criteria()
      {
        crits.add(crit);
      }
      (
        (
          < KW_OR > crit = Criteria()
          {
            crits.add(crit);
          }
        )+
      |
        (
          < KW_AND > crit = Criteria()
          {
            crits.add(crit);
            isAnd = true;
          }
        )+

      |
        (
          (<KW_IN>) crit = Criteria()
            {
              crits.add(crit);
            }
        )+
      )?
    )

  )
  < KW_CLOSED_PAREN >
  {
    MCriteria ret;
    if (crits.size() == 1)
    {
      ret = crits.get(0);
    }
    else if (isAnd)
    {
      ret = new MCriteria.And(crits.toArray(new MCriteria [ 0 ]));
    }
    else
    {
      ret = new MCriteria.Or(crits.toArray(new MCriteria [ 0 ]));
    }
    if (isNot)
    {
      ret = new MCriteria.Not(ret);
    }
    return ret;
  }
}

/**
 * A 'simple' criteria production, i.e., =,<. etc, like, ilike, in, or between.
 */
MCriteria SimpleCriteria() :
{
  MAttribute attr;
  MCriteria.SimpleOp op;
  ModelElement<? > v1 = null;
  MCriteria crit;
}
{
  attr = Attribute()
  (
    op = SimpleCriteriaOp() (v1 = Value())?
    {
      crit = new MCriteria.Simple(attr, op, v1);
    }
  | crit = ILikeCriteria(attr)
  | crit = LikeCriteria(attr)
  | crit = InCriteria(attr)
  | crit = SQLBetweenCriteria(attr)
  | crit = IsBetweenCriteria(attr)
  )
  {
    return crit;
  }
}

/**
 * A isbetween production completion. [] are used to indicate inclusivity of the endpoints.
 */
MCriteria IsBetweenCriteria(MAttribute attr) :
{
  ModelElement<? > v1;
  ModelElement<? > v2;
  boolean includeLower = false;
  boolean includeUpper = false;
}
{
  < KW_ISBETWEEN > (< KW_LSQUARE >
  {
    includeLower = true;
  }
  )? v1 = Value() v2 = Value() (< KW_RSQUARE >
  {
    includeUpper = true;
  }
  )?
  {
    return new MCriteria.Between(attr, v1, includeLower, v2, includeUpper);
  }
}

/**
 * A SQL-92 between production completion. This form is always inclusive of the ranges.
 */
MCriteria SQLBetweenCriteria(MAttribute attr) :
{
  ModelElement<? > v1;
  ModelElement<? > v2;
  boolean includeLower = true;
  boolean includeUpper = true;
}
{
  < KW_BETWEEN > v1 = Value() (<KW_AND>) v2 = Value()
  {
    return new MCriteria.Between(attr, v1, includeLower, v2, includeUpper);
  }
}

/**
 * A IN criteria completion production. Included for completeness with SQL 92.
 */
MCriteria InCriteria(MAttribute attr) :
{
  StringAndToken s;
  MValue val;
  List < MCriteria > crits = new ArrayList < MCriteria > (10);
}
{
   <KW_IN>
      <KW_OPEN_PAREN>
           ( val = Value()
                {
                   crits.add(new MCriteria.Simple(attr, MCriteria.SimpleOp.EQ, val));
                }
                ( < KW_COMMA > val = Value()
                    {
                        crits.add(new MCriteria.Simple(attr, MCriteria.SimpleOp.EQ, val));
                    }
                )*
           )
      <KW_CLOSED_PAREN>

  {
    return new MCriteria.Or(crits.toArray(new MCriteria [ crits.size() ]));
  }
}

/**
 * An ilike criteria completion production. 
 */
MCriteria ILikeCriteria(MAttribute attr) :
{
  StringAndToken s;
}
{
  < KW_ILIKE > s = SingleQuotedString()
  {
    return new MCriteria.ILike(attr, s.string);
  }
}

/**
 * A like criteria completion production. Included for completeness with SQL 92.
 */
MCriteria LikeCriteria(MAttribute attr) :
{
  StringAndToken s;
}
{
  < KW_LIKE > s = SingleQuotedString()
  {
    return new MCriteria.Like(attr, s.string);
  }
}



/**
 * A 'simple' criteria operation, like equals, not equals, less than, etc. .
 */
MCriteria.SimpleOp SimpleCriteriaOp() :
{
  Token t;
}
{
  (
    t = < KW_EQ >
    {
      return MCriteria.SimpleOp.EQ;
    }
  | t = < KW_NE >
    {
      return MCriteria.SimpleOp.NE;
    }
  | t = < KW_NULL >
    {
      return MCriteria.SimpleOp.NULL;
    }
  | t = < KW_NOT_NULL >
    {
      return MCriteria.SimpleOp.NOT_NULL;
    }
  | t = < KW_LT >
    {
      return MCriteria.SimpleOp.LT;
    }
  | t = < KW_GT >
    {
      return MCriteria.SimpleOp.GT;
    }
  | t = < KW_LE >
    {
      return MCriteria.SimpleOp.LE;
    }
  | t = < KW_GE >
    {
      return MCriteria.SimpleOp.GE;
    }
  )
}

/**
 * Value. Right hand side of a comparison. Understands Thrift's primitives, plus enum
 * casting.
 */
MValue Value() :
{
  Token t = null;
  Token t2;
  StringAndToken s;
}
{
  (
    s = SingleQuotedString()
    {
      return new MValue.MString(s.token, s.string);
    }
  |
    t = < KW_CHAR_CAST > s = SingleQuotedString()
    {
        return new MValue.MChar(s.token, s.string);
    }
  | t = < FIXEDINT >
    {
      return new MValue.MInt(t, t.image);
    }
  | t = < KW_BOOL_CAST > s = SingleQuotedString()
    {
      return new MValue.MBool(s.token, s.string);
    }
  | < KW_BYTE_CAST > t = < FIXEDINT >
    {
      return new MValue.MByte(t, t.image);
    }
  | < KW_INT_CAST > t = < FIXEDINT >
    {
      return new MValue.MInt(t, t.image);
    }
  | < KW_SHORT_CAST > t = < FIXEDINT >
    {
      return new MValue.MShort(t, t.image);
    }
  | < KW_LONG_CAST > t = < FIXEDINT >
    {
      return new MValue.MLong(t, t.image);
    }
  | t = < KW_FLOAT_CAST > s = SingleQuotedString()
    {
      return new MValue.MFloat(s.token, s.string);
    }
  | t = < KW_DOUBLE_CAST > s = SingleQuotedString()
    {
      return new MValue.MDouble(s.token, s.string);
    }
  | t = < KW_SQLDATE_CAST > s = SingleQuotedString()
    {
      return new MValue.MSqlDate(s.token, s.string);
    }
  | t = < KW_DATE_CAST > s = SingleQuotedString()
    {
      return new MValue.MJavaDate(s.token, s.string);
    }
  | (
      < KW_OPEN_PAREN >
      (
        t = < ENUMFQCLASSNAME > < KW_CLOSED_PAREN > s = SingleQuotedString()
	    {
	      return new MValue.MEnum(t, t.image.substring("enum".length()).trim(), s.string);
	    }
	  )
	)
  )
  {
    throw new UnsupportedOperationException("Fall through/null in Value()");
  }
}

/**
 * List of targets to retrieve in a select.
 */
void TargetList() :
{
  MTarget mt;
}
{
  (
    SingleTarget()
    (
      < KW_COMMA >SingleTarget()
    )*
  )
}

/**
 * A single target for selecting into. An attribute or an aggregate. 
 */
void SingleTarget() :
{
  MAttribute m;
  MAggregate agg;
}
{
  (
    < KW_STAR >
    {
      this.qmodel.includeTargetStar();
    }
  |
    < KW_ALL >
    {
      this.qmodel.includeTargetStar();
    }
  |
    m = Attribute()
    {
      this.qmodel.includeTargetAttribute(m);
    }
  | agg = Aggregate()
    {
      this.qmodel.includeTargetAggregator(agg);
    }
  )  
}

/**
 * Aggregate production. Used like sum('foo'). Sum/min/max/average/count.
 */
MAggregate Aggregate() :
{
  MAttribute ma;
  Token t;
}
{
  (
    < KW_SUM > < KW_OPEN_PAREN > ma = Attribute() < KW_CLOSED_PAREN >
    {
      return new MAggregate(MAggregate.AggOp.Sum, ma);
    }
  | < KW_MIN > < KW_OPEN_PAREN > ma = Attribute() < KW_CLOSED_PAREN >
    {
      return new MAggregate(MAggregate.AggOp.Min, ma);
    }
  | < KW_MAX > < KW_OPEN_PAREN > ma = Attribute() < KW_CLOSED_PAREN >
    {
      return new MAggregate(MAggregate.AggOp.Max, ma);
    }
  | < KW_AVG > < KW_OPEN_PAREN > ma = Attribute() < KW_CLOSED_PAREN >
    {
      return new MAggregate(MAggregate.AggOp.Average, ma);
    }
  | < KW_COUNT > < KW_OPEN_PAREN > ma = Attribute() < KW_CLOSED_PAREN >
    {
      return new MAggregate(MAggregate.AggOp.Count, ma);
    }
  )
}

/**
 * And attibute. A single quoted String, or KEY, or VALUE or STAR (for doing count(*)).
 */
MAttribute Attribute() :
{
  StringAndToken s;
  String t;
}
{
  < KW_KEY >
  {
    return MAttribute.KEY;
  }
| < KW_VALUE >
  {
    return MAttribute.VALUE;
  }
| < KW_STAR >
  {
    return MAttribute.STAR;
  }
| < KW_ALL >
  {
    return MAttribute.STAR;
  }
| t = UnQuotedString()
  {
    return new MAttribute(t);
  }
}

/**
 * Single quoted string. Uses a support class to handle escapes and such. Regexp to
 * tokenize. 
 */
StringAndToken SingleQuotedString() :
{
  Token t;
}
{
  t = < QUOTEDSTR >
  {
    return new StringAndToken(t, ParserSupport.processQuotedString(t, t.image));
  }
}


/**
 * Unquoted string.
 */
String UnQuotedString() :
{
  Token t;
}
{
  t = < STRING >
  {
    return t.image;
  }
}