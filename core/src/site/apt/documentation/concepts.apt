 ---
 Key Concepts
 ---

{Key Ehcache Concepts}

* Definitions

    * System of Record : 
    The core premise of caching assumes that there is a source of truth for 
    the data.  This is often referred to as a 
    {{{http://en.wikipedia.org/wiki/System_of_record}System of Record (SOR)}}.
    The cache acts as a local copy of data retrieved from or stored to 
    the System of Record.  

* Key Ehcache Classes

[javadoc/net/sf/ehcache/package.png] Top Level Package Diagram

    Ehcache consists of a <<<CacheManager>>>, which manages caches. Caches contain elements,
    which are essentially name value pairs. Caches are physically implemented either in-memory, or on disk.

** {CacheManager}

[javadoc/net/sf/ehcache/CacheManager.png] CacheManager Class Diagram

    The <<<CacheManager>>> comprises Caches which in turn comprise Elements.

    Creation of, access to and removal of caches is controlled by the <<<CacheManager>>>.

*** CacheManager Creation Modes

   <<<CacheManager>>> supports two creation modes: singleton and instance.

**** {Singleton Mode}

    Ehcache-1.1 supported only one <<<CacheManager>>>
    instance which was a singleton. CacheManager can still be used in this
    way using the static factory methods.

**** {Instance Mode}

    From ehcache-1.2, CacheManager has constructors which mirror the
    various static create methods. This enables multiple CacheManagers to
    be created and used concurrently. Each CacheManager requires its own
    configuration.

    If the Caches under management use only the MemoryStore, there
    are no special considerations. If Caches use the DiskStore, the
    diskStore path specified in each CacheManager configuration should be
    unique. When a new CacheManager is created, a check is made that there
    are no other CacheManagers using the same diskStore path. If there are,
    a CacheException is thrown. If a CacheManager is part of a cluster,
    there will also be listener ports which must be unique.

**** {Mixed Singleton and Instance Mode}

    If an application creates instances of CacheManager using a
    constructor, and also calls a static create method, there will exist a
    singleton instance of CacheManager which will be returned each time the
    create method is called together with any other instances created via
    constructor. The two types will coexist peacefully.



** {Ehcache}

[javadoc/net/sf/ehcache/Ehcache.png] Ehcache Interface Diagram

    All caches implement the <<<Ehcache>>> interface. A cache has a name and attributes. Each cache contains Elements.

    A Cache in Ehcache is analogous to a cache region in other caching systems.

    Cache elements are stored in the <<<MemoryStore>>>. Optionally they also overflow to a <<<DiskStore>>>.

** {Element}

[javadoc/net/sf/ehcache/Element.png] Element Class Diagram

    An element is an atomic entry in a cache. It has a key, a value and a record of
    accesses. Elements are put into and removed from caches. They can also
    expire and be removed by the Cache, depending on the Cache settings.

    As of ehcache-1.2 there is an API for Objects in addition to the one for Serializable. Non-serializable Objects can
    use all parts of Ehcache except for DiskStore and replication. If an attempt is made to persist or replicate them
    they are discarded without error and with a DEBUG level log message.

    The APIs are identical except for the return methods from Element. Two new methods on
    Element: getObjectValue and getKeyValue are the only API differences between the Serializable and Object APIs. This
    makes it very easy to start with caching Objects and then change your Objects to Seralizable to participate in
    the extra features when needed. Also a large number of Java classes are simply not Serializable.

* {Cache Usage Patterns}

    Caches can be used in several different ways. Each of these ways 
    follows a cache usage pattern.  Ehcache supports the following:

    * cache-aside (or direct manipulation)

    * cache-as-sor (combination of the following patterns)

        * read-through

        * write-through

        * write-behind (or write-back)

** Cache-aside

    Here, application code uses the cache directly.  

    This means that code that accesses the System of Record must consult
    the cache first, and if it contains the data, then the data is returned 
    from the cache.  Otherwise, the data is fetched from the System of 
    Record, stored in the cache and returned.

    When data is written, the cache must be updated with the System of 
    Record.

    This results in code that often looks like the following pseudo-code:

------------------------
public class MyDataAccessClass 
{
    private final Ehcache cache;

    public MyDataAccessClass(Ehcache cache)
    {
        this.cache = cache;
    }
    
    /* read some data, check cache first, otherwise read from sor */
    public V readSomeData(K key) 
    {
        Element element;
        if ((element = cache.get(key)) != null) {
            return element.getValue();
        }

        value = readDataFromDataStore(key);
        cache.put(new Element(key, value));
    
        return value;
    }


    /* write some data, write to sor, then update cache */
    public void writeSomeData(K key, V value) 
    {
        writeDataToDataStore(key, value);
        cache.put(new Element(key, value);
    }
}
------------------------

** Cache-as-sor

    Cache as System or Record (SOR) implies using the cache as though it
    were the primary system of record.  This pattern delegates the 
    act of reading from and writing to the SOR to cache, so application
    code is absolved of this responsibility.

    To implement the Cache-as-sor pattern requires combining the a read
    pattern known as read-through with one of the following write patterns:

    * write-through

    * write-behind

    []

    Advantages of using the Cache-as-sor pattern are:
    
    * Less cluttered application code (improved maintainability)
    
    * Easily choose between write-through or write-behind strategies on a per-cache basis

    * Allow the cache to solve the "thundering-herd" (TODO: explain) problem

    []

    Disadvantages are:

    * Less directly visible code-path

    []

*** Read-through

    The read-through pattern mimics the structure of the cache-aside pattern
    when reading data.  The difference is that you must implement the 
    <<<CacheEntryFactory>>> interface to instruct the cache how to read 
    objects on a cache miss, and you must wrap the Ehcache instance with
    an instance of <<<SelfPopulatingCache>>>.

    
    Compare the appearance of the read-through pattern code to the 
    code provided in the cache-aside pattern.  (The full example is 
    provided at the end of this document that includes a read-through 
    and write-through implementation).

*** Write-through

    The write-through pattern mimics the structure of the cache-aside pattern
    when writing data.  The difference is that you must implement the
    <<<CacheWriter>>> interface and configure the cache for write-through
    or write-behind.


    A write-through cache writes data to the System of Record in the same
    thread of execution, therefore in the common scenario of using a database
    transaction in context of the thread, the write to the database is covered 
    by the transaction in scope.


    More details (including configuration settings) can be found in the User
    Guide chapter on 
    {{{http://ehcache.org/documentation/write_through_caching.html}Write-through and Write-behind Caching}}.

*** Write-behind

    The write-behind pattern changes the timing of the write to the System
    of Record. Rather than writing to the System of Record in the same thread
    of execution, write-behind queues the data for write at a later time.

    The consequences of the change from write-through to write-behind are that
    the data write using write-behind will occur outside of the scope of the 
    transaction.

    This often-times means that a new transaction must be created to commit
    the data to the System of Record that is separate from the main transaction.
    
    More details (including configuration settings) can be found in the User
    Guide chapter on 
    {{{http://ehcache.org/documentation/write_through_caching.html}Write-through and Write-behind Caching}}.
 
*** Cache-as-sor Example

------------------------
public class MyDataAccessClass 
{
    private final Ehcache cache;

    public MyDataAccessClass(Ehcache cache)
    {
        cache.registerCacheWriter(new MyCacheWriter());
        this.cache = new SelfPopulatingCache(cache);
    }

    /* read some data */
    public V readSomeData(K key) 
    {
        return cache.get(key);
    }

    /* write some data */
    public void writeSomeData(K key, V value) 
    {
        cache.put(new Element(key, value);
    }

    /* Data reads from the cache occur here */
    private class MyCacheEntryFactory implements CacheEntryFactory
    {
        public Object createEntry(Object key) throws Exception
        {
            return readDataFromDataStore(key);
        }    
    }

    /* Data writes from the cache occur here */
    private class MyCacheWriter implements CacheWriter 
        public CacheWriter clone(Ehcache cache) throws CloneNotSupportedException;
        {
            throw new CloneNotSupportedException();
        }

        public void init() { }
        void dispose() throws CacheException { } 

        void write(Element element) throws CacheException;
        {
            writeDataToDataStore(element.getKey(), element.getValue());
        }

        void writeAll(Collection<Element> elements) throws CacheException
        {
            for (Element element : elements) {
                write(element);
            }
        }

        void delete(CacheEntry entry) throws CacheException
        {
            deleteDataFromDataStore(element.getKey());
        }

        void deleteAll(Collection<CacheEntry> entries) throws CacheException
        {
            for (Element element : elements) {
                delete(element);
            }
        }
    }
}
------------------------
