 ----
 Distributed Cache - Performance At Any Scale
 ---- 

Ehcache Distributed Cache

    Ehcache is an open source, standards-based cache used in a wide array of applications to boost performance,
    offload the database and simplify scalability. Ehcache is robust, proven and full-features and this has made it
    the most widely used Java-based cache.

    Ehcache is available under an Apache 2 {{{/license.html}license}} and is actively developed, maintained
    and supported as a professional open source project by {{{http://terracotta.org}Terracotta, Inc.}} and used as
    a key component of the Terracotta scalability continuum.

    Ehcache features memory and disk stores, replicate by copy and invalidate, listeners, cache loaders, cache extensions,
    cache exception handlers, a gzip caching servlet filter, RESTful & SOAP APIs, an implementation of JSR107 and {{{/features.html}much more...}}.

    It can scale from in-process with one or more nodes through to a mixed in-process/out-of-process configuration with
    terabyte sized caches.  For applications needing a coherent distributed cache,  Ehcache can be be distributed using
    the open source Terracotta Sever Array.

    In addition to the full-featured open source Ehcache edition, Terracotta offers the following enterprise editions of Ehcache:

     * {{{http://www.terracotta.org/ehcache/ehcache-dx?src=ehcachehome}Ehcache DX}} - Ehcache enterprise support with a console for enhanced cache monitoring and management.

     * {{{http://www.terracotta.org/ehcache/distributed-cache/?src=ehcachehome}Ehcache EX}} - Coherent distributed cache with Terracotta Server Array, plus enterprise support.

     * {{{http://www.terracotta.org/ehcache/distributed-cache/ehcache-fx?src=ehcachehome}Ehcache FX}} - Partitioned distributed cache for extreme scale scenarios, plus enterprise support.

    Terracotta offers a range of 24x7 Professional Support, Consulting, and Training services worldwide to assist you in development and
    and in operations with Ehcache.

    Ehcache is distributed in the following modules: 

*----------+--------------+
{{{documentation/index.html}ehcache}} | a packaging of commonly used modules
*----------+--------------+
{{{documentation/index.html}ehcache-core}} | Caching engine, RMI replication and Hibernate plugin
*----------+--------------+
{{{documentation/distributed_caching_with_terracotta.html}ehcache-terracotta}} | Seamless integration with Terracotta clustering     
*----------+--------------+
{{{modules/monitor.html}ehcache-monitor (in beta)}} | _new_ Enterprise-class monitoring and management for development and production
*----------+--------------+
{{{documentation/web_caching.html}ehcache-web}} | Java Servlet Container caching, gzipping filters
*----------+--------------+
{{{documentation/remotedebugger.html}ehcache-debugger}} | Allows tracing of distributed replication events
*----------+--------------+
{{{documentation/jsr107.html}ehcache-jcache}} | JSR107 JCACHE Implementation
*----------+--------------+
{{{documentation/distributed_caching_with_jgroups.html}ehcache-jgroupsreplication}} | Replication via JGroups
*----------+--------------+
{{{documentation/distributed_caching_with_jms.html}ehcache-jmsreplication}} | Replication via JMS
*----------+--------------+
{{{documentation/openjpa_provider.html}ehcache-openjpa}} | Caching Plugin for OpenJPA
*----------+--------------+
{{{documentation/cache_server.html}ehcache-server}} | RESTful cache server in a WAR or standalone
*----------+--------------:

* Latest News

** 3 February 2010: Ehcache 2.0 beta released

  This is a preview of Ehcache 2.0, aka Project Darwin. Features are as per the GA release.

** 11 January 2010: ehcache-1.8, ehcache-core-1.7.2 and ehcache-terracotta-1.8

  This is a final GA release of ehcache comprising ehcache, ehcache-core and ehcache-terracotta modules.

  This release contains some bug fixes to ehcache-core, but the notable change is the upgrade of the ehcache-terracotta
  module to support Terracotta 3.2. Terracotta 3.2 is dramatically faster than 3.1. See the {{{http://ehcache.org/changes-report.html}changelog}} for complete details
  of ehcache-core changes.

  Note: If you experience different caching ergonomics you can enable the <<<LinkedHashMap>>> based engine with
  <<<java -Dnet.sf.ehcache.use.classic.lru=true>>>. This is the engine enabled up to 1.5.

** 22 December 2009: Ehcache OpenJPA plugin 0.2 released

   Back in July we released the first plugin for OpenJPA. This version brings OpenJPA more into line with the Hibernate
   plugin and more fully implements the OpenJPA API. As with all of the modules we are releasing, this version adds the option,
   when paired with the ehcache-terracotta module of clustering via Terracotta.

   See {{{documentation/openjpa_provider.html}ehcache-openjpa}}.


** 15 December 2009: Ehcache Monitor Beta 2 released

   We have had hundreds of people sign up for an play with beta 1 of the Ehcache Monitor. We have fixed over 15 bugs
    in Beta 1 and have released Beta 2. We have also created a roadmap for beta 3 which will add significant new
    features. See {{{modules/monitor.html}Ehcache Monitor Beta}}.

** 13 December 2009: Ehcache Web 2.0 released

  Ehcache Web has been part of Ehcache for years. In this release the web caching is split into its own module.
   The web module provides a filter based PageCachingFilter and PageFragmentCachingFilter which can
  be used with any Java web framework for caching of HTML, SOAP, REST, JSON, XML and other types.

  New in this release is integration with ehcache-terracotta 1.7.1 and higher, so that coherent, terabyte scale
  web caches can be created.

  See {{{documentation/web_caching.html}ehcache-web}}.


** 9 December 2009: Ehcache welcomes Grails as a first-class supported framework

  Grails 1.2RC1 and higher use Ehcache as the default Hibernate second level cache. However earlier versions of Grails
  ship with the Ehcache library and are very simple to enable.

  A new {{{http://ehcache.org/documentation/grails.html}Grails Chapter}} shows how to configure Grails to use Ehcache and how
  to tune it for production use.

 More {{{news.html}news}}...




