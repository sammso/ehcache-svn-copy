 ------
 Consistency Use Cases
 ------

*   Scenario

    There are 3 nodes behind a non-sticky load balancer. A write happens to A.


    There are some problems:

    *   Different - A Read on B may give a different value to a read on C. This also implies you could read new, old and new.

    What we are looking for is a property of Monotonic Cluster Reads.


    *   Stale - A Read on A, B or C sees a stale value




*   Monotonic Cluster Reads

    An implementation is sync eventual + 0 maxElementsInMemory (disabled local cache)

*   Monotonic Cluster Reads apart from a non-readable writer

    Process A writes but never reads. In practice this could be because a distributed cache gets updated by an app which is not visible
    to a load balancer.

    An implementation is async eventual + 0 maxElementsInMemory (disabled local cache)

    Note: Disabling the local cache can also be achieved with: <<<ehcache.storageStrategy.dcv2.localcache.enabled = false>>>


*   Principle

    HA is an orthogonal concern to consistency.

    This is the D in ACID.

    So, across all consistency modes you should be able to choose sync in any mode.

*   Strong Consistency Use Cases

**  Shopping Cart

    + one of: EL, LT, XA

**  Order Processing/Workflow System

    + sync

**  AJAX Web App

    Data could be read multiple times for one page through a non-sticky load balancer. Reads could therefore go to multiple
    L1s and get inconsistency on a single page.


*   Eventual Consistency Use Cases


    * Feed your click (or browse sequence). 1-2 seconds between clicks. Very Improbable that our eventual mode would be detectably different
      from strong consistency. To further reduce the probablility use a stick session.

    * Immutable (Reference) Data

    * Data that is only written in a maintenance window

    * Reporting Node: All transactional nodes use explicit locking with a CacheDecorator. Any reporting nodes do not use the CacheDecorator.
      (Note: This is the same effect as consistency=strong plus UnlockedReadsViews except for the 5 minutes)

    * Data that is only ever written by one node and a inconsistency window is allowed (e.g. Profile, Social Media write (wall, twitter)




Idea: UnlockedReadsView could be set configurable. You could set it in the terracotta config element.



* Issues

   * lockgc. Should be able to be turned off per cache/configured per cache

   * strong + BigMemory L1. In 32 bit mode 200 bytes is used per lock. This mean 200k per million elements, which places an upper limit
     on the size that BigMemory L1 can be.








